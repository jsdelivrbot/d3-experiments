<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1478990293997">{:repl-history {:ide [], :local [&quot;(let [width 400\n      height 400\n      points (atom (mapv (fn [_] {:x  (rand-int width)\n                                  :y  (rand-int height)\n                                  :vx (rand* -0.01 0.01)\n                                  :vy (rand* -0.01 0.01)})\n                         (range 10)))]\n  (u/timer (fn [_]\n             (reset! points\n                     (mapv\n                       (fn [{:keys [x y vx vy]}]\n                         (let [vx (if (or (&gt; (+ x vx) width) (&lt; (+ x vx) 0)) (- vx) vx)\n                               vy (if (or (&gt; (+ y vy) height) (&lt; (+ y vy) 0)) (- vy) vy)]\n                           {:x  (+ x vx)\n                            :y  (+ y vy)\n                            :vx vx\n                            :vy vy}))\n                       @points))))\n  (.. js/d3\n      (select \&quot;#app\&quot;)\n      (append \&quot;svg\&quot;)\n      (attr \&quot;width\&quot; width)\n      (attr \&quot;height\&quot; height)\n      (append \&quot;g\&quot;)\n      (selectAll \&quot;.point\&quot;)\n      (data (js&gt; @points))\n      enter\n      (append \&quot;circle\&quot;)\n      (attr \&quot;r\&quot; 10)\n      (attr \&quot;cx\&quot; #(.-cx %))\n      (attr \&quot;cy\&quot; #(.-cy %))))&quot; &quot;(ns d3.moving-voronoi\n  (:require-macros [d3.utils :refer [attrs&gt; styles&gt;]])\n  (:require cljsjs.d3\n            [d3.utils :as u]))&quot; &quot;(println u/timer)&quot; &quot;(defn rand* [a b]\n  (+ (rand (- b a)) a))&quot; &quot;(let [width 400\n      height 400\n      points (atom (mapv (fn [_] {:x  (rand-int width)\n                                  :y  (rand-int height)\n                                  :vx (rand* -0.01 0.01)\n                                  :vy (rand* -0.01 0.01)})\n                         (range 10)))]\n  (u/timer (fn [_]\n             (reset! points\n                     (mapv\n                       (fn [{:keys [x y vx vy]}]\n                         (let [vx (if (or (&gt; (+ x vx) width) (&lt; (+ x vx) 0)) (- vx) vx)\n                               vy (if (or (&gt; (+ y vy) height) (&lt; (+ y vy) 0)) (- vy) vy)]\n                           {:x  (+ x vx)\n                            :y  (+ y vy)\n                            :vx vx\n                            :vy vy}))\n                       @points))))\n  (.. js/d3\n      (select \&quot;#app\&quot;)\n      (append \&quot;svg\&quot;)\n      (attr \&quot;width\&quot; width)\n      (attr \&quot;height\&quot; height)\n      (append \&quot;g\&quot;)\n      (selectAll \&quot;.point\&quot;)\n      (data (clj-&gt;js @points))\n      enter\n      (append \&quot;circle\&quot;)\n      (attr \&quot;r\&quot; 10)\n      (attr \&quot;cx\&quot; #(.-cx %))\n      (attr \&quot;cy\&quot; #(.-cy %))))&quot; &quot;(let [width 400\n      height 400\n      points (atom (mapv (fn [_] {:x  (rand-int width)\n                                  :y  (rand-int height)\n                                  :vx (rand* -0.01 0.01)\n                                  :vy (rand* -0.01 0.01)})\n                         (range 10)))]\n  (u/timer (fn [_]\n             (reset! points\n                     (mapv\n                       (fn [{:keys [x y vx vy]}]\n                         (let [vx (if (or (&gt; (+ x vx) width) (&lt; (+ x vx) 0)) (- vx) vx)\n                               vy (if (or (&gt; (+ y vy) height) (&lt; (+ y vy) 0)) (- vy) vy)]\n                           {:x  (+ x vx)\n                            :y  (+ y vy)\n                            :vx vx\n                            :vy vy}))\n                       @points))))\n  (.. js/d3\n      (select \&quot;#app\&quot;)\n      (append \&quot;svg\&quot;)\n      (attr \&quot;width\&quot; width)\n      (attr \&quot;height\&quot; height)\n      (append \&quot;g\&quot;)\n      (selectAll \&quot;.point\&quot;)\n      (data (clj-&gt;js @points))\n      (enter)\n      (append \&quot;circle\&quot;)\n      (attr \&quot;r\&quot; 10)\n      (attr \&quot;cx\&quot; #(.-cx %))\n      (attr \&quot;cy\&quot; #(.-cy %))))&quot; &quot;(let [width 400\n      height 400\n      points (atom (mapv (fn [_] {:x  (rand-int width)\n                                  :y  (rand-int height)\n                                  :vx (rand* -0.01 0.01)\n                                  :vy (rand* -0.01 0.01)})\n                         (range 10)))]\n  (u/timer (fn [_]\n             (reset! points\n                     (mapv\n                       (fn [{:keys [x y vx vy]}]\n                         (let [vx (if (or (&gt; (+ x vx) width) (&lt; (+ x vx) 0)) (- vx) vx)\n                               vy (if (or (&gt; (+ y vy) height) (&lt; (+ y vy) 0)) (- vy) vy)]\n                           {:x  (+ x vx)\n                            :y  (+ y vy)\n                            :vx vx\n                            :vy vy}))\n                       @points))))\n  (.. js/d3\n      (select \&quot;#app\&quot;)\n      (append \&quot;svg\&quot;)\n      (attr \&quot;width\&quot; width)\n      (attr \&quot;height\&quot; height)\n      (append \&quot;g\&quot;)\n      (selectAll \&quot;.point\&quot;)\n      (data (clj-&gt;js @points))\n      (enter)\n      (append \&quot;circle\&quot;)\n      (attr \&quot;r\&quot; 10)\n      (attr \&quot;cx\&quot; #(println %))\n      (attr \&quot;cy\&quot; #(.-cy %))))&quot; &quot;(let [width 400\n      height 400\n      points (atom (mapv (fn [_] {:x  (rand-int width)\n                                  :y  (rand-int height)\n                                  :vx (rand* -0.01 0.01)\n                                  :vy (rand* -0.01 0.01)})\n                         (range 10)))]\n  (u/timer (fn [_]\n             (reset! points\n                     (mapv\n                       (fn [{:keys [x y vx vy]}]\n                         (let [vx (if (or (&gt; (+ x vx) width) (&lt; (+ x vx) 0)) (- vx) vx)\n                               vy (if (or (&gt; (+ y vy) height) (&lt; (+ y vy) 0)) (- vy) vy)]\n                           {:x  (+ x vx)\n                            :y  (+ y vy)\n                            :vx vx\n                            :vy vy}))\n                       @points))))\n  (.. js/d3\n      (select \&quot;#app\&quot;)\n      (append \&quot;svg\&quot;)\n      (attr \&quot;width\&quot; width)\n      (attr \&quot;height\&quot; height)\n      (append \&quot;g\&quot;)\n      (selectAll \&quot;.point\&quot;)\n      (data (clj-&gt;js @points))\n      (enter)\n      (append \&quot;circle\&quot;)\n      (attr \&quot;r\&quot; 10)\n      (attr \&quot;cx\&quot; #(.-x %))\n      (attr \&quot;cy\&quot; #(.-y %))))&quot; &quot;(let [width 400\n      height 400\n      points (atom (mapv (fn [_] {:x  (rand-int width)\n                                  :y  (rand-int height)\n                                  :vx (rand* -0.01 0.01)\n                                  :vy (rand* -0.01 0.01)})\n                         (range 10)))\n      _ (u/timer (fn [_]\n                   (reset! points\n                           (mapv\n                             (fn [{:keys [x y vx vy]}]\n                               (let [vx (if (or (&gt; (+ x vx) width) (&lt; (+ x vx) 0)) (- vx) vx)\n                                     vy (if (or (&gt; (+ y vy) height) (&lt; (+ y vy) 0)) (- vy) vy)]\n                                 {:x  (+ x vx)\n                                  :y  (+ y vy)\n                                  :vx vx\n                                  :vy vy}))\n                             @points))))\n      pts (.. js/d3\n              (select \&quot;#app\&quot;)\n              (append \&quot;svg\&quot;)\n              (attr \&quot;width\&quot; width)\n              (attr \&quot;height\&quot; height)\n              (append \&quot;g\&quot;)\n              (selectAll \&quot;.point\&quot;)\n              (data (clj-&gt;js @points))\n              (enter)\n              (append \&quot;circle\&quot;)\n              (attr \&quot;r\&quot; 10)\n              (attr \&quot;cx\&quot; #(.-x %))\n              (attr \&quot;cy\&quot; #(.-y %)))]\n  \n  (u/timer (fn [_]\n             (let [ps @points] \n               (.. pts \n                   (attr \&quot;cx\&quot; #(:x (get ps %1)))\n                   (attr \&quot;cy\&quot; #(:y (get ps %1))))))))&quot; &quot;(let [width 400\n      height 400\n      points (atom (mapv (fn [_] {:x  (rand-int width)\n                                  :y  (rand-int height)\n                                  :vx (rand* -0.3 0.3)\n                                  :vy (rand* -0.3 0.3)})\n                         (range 40)))\n\n      vor-obj (.clipExtent\n                (u/voronoi)\n                (clj-&gt;js [[(/ (- width) 2) (/ (- height) 2)]\n                          [(/ (+ width) 2) (/ (+ height) 2)]]))\n\n      _ (u/timer (fn [_]\n                   (reset! points\n                           (mapv\n                             (fn [{:keys [x y vx vy]}]\n                               (let [vx (if (or (&gt; (+ x vx) width) (&lt; (+ x vx) 0)) (- vx) vx)\n                                     vy (if (or (&gt; (+ y vy) height) (&lt; (+ y vy) 0)) (- vy) vy)]\n                                 {:x  (+ x vx)\n                                  :y  (+ y vy)\n                                  :vx vx\n                                  :vy vy}))\n                             @points))\n                   false))\n\n      pts (.. js/d3\n              (select \&quot;#app\&quot;)\n              (append \&quot;svg\&quot;)\n              (attr \&quot;width\&quot; width)\n              (attr \&quot;height\&quot; height)\n              (append \&quot;g\&quot;)\n              (selectAll \&quot;path\&quot;)\n              (data (clj-&gt;js @points))\n              (enter)\n              (append \&quot;path\&quot;))\n\n      line (.. js/d3 -svg line (interpolate \&quot;basis-closed\&quot;))\n\n      three-polate (fn [[[x0 y0] [x1 y1]]]\n                     [[x0 y0]\n                      [(/ (+ (* 2 x0) x1) 3), (/ (+ (* 2 y0) y1) 3)]\n                      [(/ (+ (* 2 x1) x0) 3), (/ (+ (* 2 y1) y0) 3)]])\n\n      resample (fn [pts]\n                 (let [pairs (map vector (cons (last pts) pts) pts)]\n                   (mapcat three-polate pairs)))]\n\n  (u/timer (fn [_]\n             (let [ps @points\n                   vnoi (vor-obj (clj-&gt;js (mapv (juxt :x :y) ps)))]\n               (-&gt; pts (.attr \&quot;d\&quot; (fn [pt i] (line (clj-&gt;js (resample (nth vnoi i)))))))\n               false))))&quot; &quot;(defn moving-circles [{:keys [width height radius n speed]}]\n  (let [points (atom (mapv (fn [_] {:x   (rand-int width)\n                                    :y   (rand-int height)\n                                    :vx  (-&gt;num speed)\n                                    :vy  (-&gt;num speed)\n                                    :rad (-&gt;num radius)})\n                           (range (-&gt;num n))))\n        _ (u/timer (fn [_]\n                     (reset! points\n                             (mapv\n                               (fn [{:keys [x y vx vy rad]}]\n                                 (let [vx (if (or (&gt; (+ x vx) (- width rad)) (&lt; (+ x vx) rad)) (- vx) vx)\n                                       vy (if (or (&gt; (+ y vy) (- height rad)) (&lt; (+ y vy) rad)) (- vy) vy)]\n                                   {:x   (+ x vx)\n                                    :y   (+ y vy)\n                                    :vx  vx\n                                    :vy  vy\n                                    :rad rad}))\n                               @points))\n                     false))\n        pts (.. js/d3\n                (select \&quot;#app\&quot;)\n                (append \&quot;svg\&quot;)\n                (attr \&quot;width\&quot; width)\n                (attr \&quot;height\&quot; height)\n                (append \&quot;g\&quot;)\n                (selectAll \&quot;circle\&quot;)\n                (data (clj-&gt;js @points))\n                (enter)\n                (append \&quot;circle\&quot;)\n                (attr \&quot;r\&quot; #(.-rad %))\n                (attr \&quot;cx\&quot; #(.-x %))\n                (attr \&quot;cy\&quot; #(.-y %)))]\n\n    (u/timer (fn [_]\n               (let [ps @points]\n                 (.. pts\n                     (attr \&quot;cx\&quot; #(:x (get ps %2)))\n                     (attr \&quot;cy\&quot; #(:y (get ps %2))))\n                 false)))))&quot; &quot;(moving-circles\n    {:width  500\n     :height 500\n     :radius [10 20]\n     :n      [10 20]\n     :speed  [-0.2 0.2]})&quot; &quot;(moving-circles\n    {:width  500\n     :height 500\n     :radius [10 30]\n     :n      [10 20]\n     :speed  [-0.5 0.5]})&quot; &quot;(ns d3.moving-voronoi\n  (:require-macros [d3.utils :refer [attrs&gt; styles&gt;]])\n  (:require cljsjs.d3\n            [d3.utils :as u]\n            [d3.prob :as p]\n            [d3.palettes :as palettes]\n            [d3.multis :refer [draw animate]]))&quot; &quot;(ex1)&quot; &quot;(defn ex3 []\n  (let [cs (.. js/d3.scale linear (domain #js [0 10]) (range #js [\&quot;tomato\&quot; \&quot;#FAFAFA\&quot;]))]\n    (rvoronoi {:width         800\n               :height        800\n               :selector      \&quot;#app\&quot;\n               :data          (flower {:x      0\n                                       :y      0\n                                       :depth  10\n                                       :r      600\n                                       :petals [3 21]\n                                       :speed  [-0.01 0.01]})\n               :default-style (styles&gt; {:stroke \&quot;white\&quot; :stroke-width \&quot;2px\&quot; :fill #(cs (rand* 0 6))})})))&quot; &quot;(ex3)&quot; &quot;(ex4)&quot; &quot;(let [ramp (-&gt; u/scale\n               (.linear)\n               (.domain #js [0 10])\n               (.range #js [\&quot;blue\&quot; \&quot;red\&quot;]))]\n  [(ramp 10) (ramp 5) (.invert ramp 0)])&quot; &quot;(let [ramp (-&gt; u/scale\n               (.linear)\n               (.domain #js [0 10])\n               (.range #js [\&quot;blue\&quot; \&quot;red\&quot;]))]\n  [(ramp 10) (ramp 5) ((.invert ramp) 2)])&quot; &quot;(let [ramp (-&gt; u/scale\n               (.linear)\n               (.domain #js [0 10])\n               (.range #js [\&quot;blue\&quot; \&quot;red\&quot;]))]\n  [(ramp 10) (ramp 5) (.invert ramp 2)])&quot; &quot;(let [ramp (-&gt; u/scale\n               (.linear)\n               (.domain #js [0 10])\n               (.range #js [\&quot;blue\&quot; \&quot;red\&quot;]))]\n  [(ramp 10) (ramp 5) (.invert ramp \&quot;blue\&quot;)])&quot; &quot;(let [ramp (-&gt; u/scale\n               (.linear)\n               (.domain #js [0 10])\n               (.range #js [\&quot;blue\&quot; \&quot;red\&quot;]))]\n  [(ramp 10) (ramp 5) (.invert ramp \&quot;#800080\&quot;)])&quot; &quot;(&gt;&gt; (svg)\n      [:selectAll \&quot;circle\&quot;]\n      [:data [scatter-data]]\n      [:enter]\n      [:append \&quot;circle\&quot;]\n      (u/attrs {:r 5 :cx #(* 10 %2) :cy #(.-friends %1)}))&quot; &quot;(js&gt; scatter-data)&quot; &quot;(let [x-extent (js/d3.extent (js&gt; scatter-data) #(.-salary %))\n        y-extent (js/d3.extent (js&gt; scatter-data) #(.-friends %))\n        xsc (.. u/scale linear (domain x-extent) (range #js [0 500]))\n        ysc (.. u/scale linear (domain y-extent) (range #js [0 500]))\n        x-axis (.. js/d3 -svg axis (scale xsc) (orient \&quot;bottom\&quot;) (ticks 4) (tickSize 500))\n        y-axis (.. js/d3 -svg axis (scale ysc) (orient \&quot;right\&quot;) (ticks 16) (tickSize 500))\n        svg (svg 600 600)]\n    (&gt;&gt; svg\n        [:selectAll \&quot;circle\&quot;]\n        [:data [scatter-data]]\n        [:enter]\n        [:append \&quot;circle\&quot;]\n        (u/attrs {:r 5 :cx #(xsc (.-salary %)) :cy #(ysc (.-friends %))}))\n\n    (&gt;&gt; svg\n        [:append \&quot;g\&quot;]\n        [:attr [\&quot;id\&quot; \&quot;yAxisG\&quot;]]\n        [:call y-axis])\n\n    (&gt;&gt; svg\n        [:append \&quot;g\&quot;]\n        [:attr [\&quot;id\&quot; \&quot;xAxisG\&quot;]]\n        [:call x-axis])\n\n    (*&gt; [:selectAll \&quot;path.domain\&quot;] (u/styles {:fill \&quot;none\&quot; :stroke \&quot;black\&quot;}))\n    (*&gt; [:selectAll \&quot;line\&quot;] (u/styles {:stroke \&quot;black\&quot;})))&quot; &quot;(let [pie-chart (.sort (.pie u/layout) nil)\n        p1 (pie-chart (js&gt; data))\n        p2 (pie-chart (js&gt; (vec (shuffle data))))\n        new-arc (.. (u/arc) (outerRadius \&quot;100\&quot;) (innerRadius \&quot;70\&quot;))\n        color-scale (.. u/scale linear (domain (js&gt; (bounds data))) (range #js [\&quot;blue\&quot; \&quot;red\&quot;]))\n        svg (svg)]\n    (&gt;&gt; svg\n        [:append \&quot;g\&quot;]\n        [:attr [\&quot;transform\&quot; \&quot;translate(250,250)\&quot;]]\n        [:selectAll \&quot;path\&quot;]\n        [:data p1]\n        [:enter]\n        [:append \&quot;path\&quot;]\n        [:attr [\&quot;d\&quot; new-arc]]\n        (u/styles {:fill         (fn [d] (color-scale (.-data d)))\n                   :opacity      \&quot;0.5\&quot;\n                   :stroke       \&quot;black\&quot;\n                   :stroke-width \&quot;2px\&quot;}))\n    (&gt;&gt; svg\n        [:selectAll \&quot;path\&quot;]\n        [:data p2]\n        [:transition]\n        [:delay 1000]\n        [:duration 1000]\n        [:attr [\&quot;d\&quot; new-arc]]\n        [:style [\&quot;fill\&quot; (fn [d] (color-scale (.-data d)))]]))&quot; &quot;(pie [2 2 6 7])&quot; &quot;(defn pie\n  \&quot;incomplete transition are bad\&quot;\n  [data]\n  (let [pie-chart (.sort (.pie u/layout) \&quot;null\&quot;)\n        p1 (pie-chart (js&gt; data))\n        p2 (pie-chart (js&gt; (vec (shuffle data))))\n        new-arc (.. (u/arc) (outerRadius \&quot;100\&quot;) (innerRadius \&quot;70\&quot;))\n        color-scale (.. u/scale linear (domain (js&gt; (bounds data))) (range #js [\&quot;blue\&quot; \&quot;red\&quot;]))\n        svg (svg)]\n    (&gt;&gt; svg\n        [:append \&quot;g\&quot;]\n        [:attr [\&quot;transform\&quot; \&quot;translate(250,250)\&quot;]]\n        [:selectAll \&quot;path\&quot;]\n        [:data p1]\n        [:enter]\n        [:append \&quot;path\&quot;]\n        [:attr [\&quot;d\&quot; new-arc]]\n        (u/styles {:fill         (fn [d] (color-scale (.-data d)))\n                   :opacity      \&quot;0.5\&quot;\n                   :stroke       \&quot;black\&quot;\n                   :stroke-width \&quot;2px\&quot;}))\n    (&gt;&gt; svg\n        [:selectAll \&quot;path\&quot;]\n        [:data p2]\n        [:transition]\n        [:delay 1000]\n        [:duration 1000]\n        [:attr [\&quot;d\&quot; new-arc]]\n        [:style [\&quot;fill\&quot; (fn [d] (color-scale (.-data d)))]])))&quot; &quot;(defn bounds [num-coll]\n  [(apply min num-coll) (apply max num-coll)])&quot; &quot;(defn pie\n  \&quot;incomplete transition are bad\&quot;\n  [data]\n  (let [pie-chart (.sort (.pie u/layout))\n        p1 (pie-chart (js&gt; data))\n        p2 (pie-chart (js&gt; (vec (shuffle data))))\n        new-arc (.. (u/arc) (outerRadius \&quot;100\&quot;) (innerRadius \&quot;70\&quot;))\n        color-scale (.. u/scale linear (domain (js&gt; (bounds data))) (range #js [\&quot;blue\&quot; \&quot;red\&quot;]))\n        svg (svg)]\n    (&gt;&gt; svg\n        [:append \&quot;g\&quot;]\n        [:attr [\&quot;transform\&quot; \&quot;translate(250,250)\&quot;]]\n        [:selectAll \&quot;path\&quot;]\n        [:data p1]\n        [:enter]\n        [:append \&quot;path\&quot;]\n        [:attr [\&quot;d\&quot; new-arc]]\n        (u/styles {:fill         (fn [d] (color-scale (.-data d)))\n                   :opacity      \&quot;0.5\&quot;\n                   :stroke       \&quot;black\&quot;\n                   :stroke-width \&quot;2px\&quot;}))\n    (&gt;&gt; svg\n        [:selectAll \&quot;path\&quot;]\n        [:data p2]\n        [:transition]\n        [:delay 1000]\n        [:duration 1000]\n        [:attr [\&quot;d\&quot; new-arc]]\n        [:style [\&quot;fill\&quot; (fn [d] (color-scale (.-data d)))]])))&quot; &quot;(defn pie\n  \&quot;incomplete transition are bad\&quot;\n  [data]\n  (let [pie-chart (.sort (.pie u/layout) nil)\n        p1 (pie-chart (js&gt; data))\n        p2 (pie-chart (js&gt; (vec (shuffle data))))\n        new-arc (.. (u/arc) (outerRadius \&quot;100\&quot;) (innerRadius \&quot;70\&quot;))\n        color-scale (.. u/scale linear (domain (js&gt; (bounds data))) (range #js [\&quot;blue\&quot; \&quot;red\&quot;]))\n        svg (svg)]\n    (&gt;&gt; svg\n        [:append \&quot;g\&quot;]\n        [:attr [\&quot;transform\&quot; \&quot;translate(250,250)\&quot;]]\n        [:selectAll \&quot;path\&quot;]\n        [:data p1]\n        [:enter]\n        [:append \&quot;path\&quot;]\n        [:attr [\&quot;d\&quot; new-arc]]\n        (u/styles {:fill         (fn [d] (color-scale (.-data d)))\n                   :opacity      \&quot;0.5\&quot;\n                   :stroke       \&quot;black\&quot;\n                   :stroke-width \&quot;2px\&quot;}))\n    (&gt;&gt; svg\n        [:selectAll \&quot;path\&quot;]\n        [:data p2]\n        [:transition]\n        [:delay 1000]\n        [:duration 1000]\n        [:attr [\&quot;d\&quot; new-arc]]\n        [:style [\&quot;fill\&quot; (fn [d] (color-scale (.-data d)))]])))&quot; &quot;(defn pie\n  \&quot;incomplete transition are bad\&quot;\n  [data]\n  (let [pie-chart (.pie u/layout)\n        p1 (pie-chart (js&gt; data))\n        p2 (pie-chart (js&gt; (vec (shuffle data))))\n        new-arc (.. (u/arc) (outerRadius \&quot;100\&quot;) (innerRadius \&quot;70\&quot;))\n        color-scale (.. u/scale linear (domain (js&gt; (bounds data))) (range #js [\&quot;blue\&quot; \&quot;red\&quot;]))\n        svg (svg)]\n    (&gt;&gt; svg\n        [:append \&quot;g\&quot;]\n        [:attr [\&quot;transform\&quot; \&quot;translate(250,250)\&quot;]]\n        [:selectAll \&quot;path\&quot;]\n        [:data p1]\n        [:enter]\n        [:append \&quot;path\&quot;]\n        [:attr [\&quot;d\&quot; new-arc]]\n        (u/styles {:fill         (fn [d] (color-scale (.-data d)))\n                   :opacity      \&quot;0.5\&quot;\n                   :stroke       \&quot;black\&quot;\n                   :stroke-width \&quot;2px\&quot;}))\n    (&gt;&gt; svg\n        [:selectAll \&quot;path\&quot;]\n        [:data p2]\n        [:transition]\n        [:delay 1000]\n        [:duration 1000]\n        [:attr [\&quot;d\&quot; new-arc]]\n        [:style [\&quot;fill\&quot; (fn [d] (color-scale (.-data d)))]])))&quot; &quot;(defn pie\n  \&quot;incomplete transition are bad\&quot;\n  [data]\n  (let [pie-chart (.sort (.pie u/layout) nil)\n        p1 (pie-chart (js&gt; data))\n        p2 (pie-chart (js&gt; (vec (shuffle data))))\n        new-arc (.. (u/arc) (outerRadius \&quot;100\&quot;) (innerRadius \&quot;70\&quot;))\n        color-scale (.. u/scale linear (domain (js&gt; (bounds data))) (range #js [\&quot;blue\&quot; \&quot;red\&quot;]))\n        arcTween (fn [a] \n                   (this-as this \n                     (let [i (js/d3.interpolate (.-_curent this) a)]\n                       (aset this \&quot;_current\&quot; (aget i 0))\n                       (fn [t] (js/newArc (aget i t))))))\n        svg (svg)]\n    (&gt;&gt; svg\n        [:append \&quot;g\&quot;]\n        [:attr [\&quot;transform\&quot; \&quot;translate(250,250)\&quot;]]\n        [:selectAll \&quot;path\&quot;]\n        [:data p1]\n        [:enter]\n        [:append \&quot;path\&quot;]\n        [:attr [\&quot;d\&quot; new-arc]]\n        (u/styles {:fill         (fn [d] (color-scale (.-data d)))\n                   :opacity      \&quot;0.5\&quot;\n                   :stroke       \&quot;black\&quot;\n                   :stroke-width \&quot;2px\&quot;}))\n    (&gt;&gt; svg\n        [:selectAll \&quot;path\&quot;]\n        [:data p2]\n        [:transition]\n        [:delay 1000]\n        [:duration 1000]\n        [:attrTween [\&quot;d\&quot; arc-tween]]\n        [:style [\&quot;fill\&quot; (fn [d] (color-scale (.-data d)))]])))&quot; &quot;(defn pie\n  \&quot;incomplete transition are bad\&quot;\n  [data]\n  (let [pie-chart (.sort (.pie u/layout) nil)\n        p1 (pie-chart (js&gt; data))\n        p2 (pie-chart (js&gt; (vec (shuffle data))))\n        new-arc (.. (u/arc) (outerRadius \&quot;100\&quot;) (innerRadius \&quot;70\&quot;))\n        color-scale (.. u/scale linear (domain (js&gt; (bounds data))) (range #js [\&quot;blue\&quot; \&quot;red\&quot;]))\n        arc-tween (fn [a] \n                   (this-as this \n                     (let [i (js/d3.interpolate (.-_curent this) a)]\n                       (aset this \&quot;_current\&quot; (aget i 0))\n                       (fn [t] (js/newArc (aget i t))))))\n        svg (svg)]\n    (&gt;&gt; svg\n        [:append \&quot;g\&quot;]\n        [:attr [\&quot;transform\&quot; \&quot;translate(250,250)\&quot;]]\n        [:selectAll \&quot;path\&quot;]\n        [:data p1]\n        [:enter]\n        [:append \&quot;path\&quot;]\n        [:attr [\&quot;d\&quot; new-arc]]\n        (u/styles {:fill         (fn [d] (color-scale (.-data d)))\n                   :opacity      \&quot;0.5\&quot;\n                   :stroke       \&quot;black\&quot;\n                   :stroke-width \&quot;2px\&quot;}))\n    (&gt;&gt; svg\n        [:selectAll \&quot;path\&quot;]\n        [:data p2]\n        [:transition]\n        [:delay 1000]\n        [:duration 1000]\n        [:attrTween [\&quot;d\&quot; arc-tween]]\n        [:style [\&quot;fill\&quot; (fn [d] (color-scale (.-data d)))]])))&quot; &quot;(defn pie\n  \&quot;incomplete transition are bad\&quot;\n  [data]\n  (let [pie-chart (.sort (.pie u/layout) nil)\n        p1 (pie-chart (js&gt; data))\n        p2 (pie-chart (js&gt; (vec (shuffle data))))\n        new-arc (.. (u/arc) (outerRadius \&quot;100\&quot;) (innerRadius \&quot;70\&quot;))\n        color-scale (.. u/scale linear (domain (js&gt; (bounds data))) (range #js [\&quot;blue\&quot; \&quot;red\&quot;]))\n        arc-tween (fn [a]\n                   (this-as this\n                     (let [i (js/d3.interpolate (.-_curent this) a)]\n                       (aset this \&quot;_current\&quot; (aget i 0))\n                       (fn [t] (js/newArc (aget i t))))))\n        svg (svg)]\n    (&gt;&gt; svg\n        [:append \&quot;g\&quot;]\n        [:attr [\&quot;transform\&quot; \&quot;translate(250,250)\&quot;]]\n        [:selectAll \&quot;path\&quot;]\n        [:data p1]\n        [:enter]\n        [:append \&quot;path\&quot;]\n        [:attr [\&quot;d\&quot; new-arc]]\n        (u/styles {:fill         (fn [d] (color-scale (.-data d)))\n                   :opacity      \&quot;0.5\&quot;\n                   :stroke       \&quot;black\&quot;\n                   :stroke-width \&quot;2px\&quot;}))\n    (&gt;&gt; svg\n        [:selectAll \&quot;path\&quot;]\n        [:data p2]\n        [:transition]\n        [:delay 1000]\n        [:duration 1000]\n        [:attrTween [\&quot;d\&quot; arc-tween]]\n        [:style [\&quot;fill\&quot; (fn [d] (color-scale (.-data d)))]])))&quot; &quot;(js/d3.interpolate 0 10)&quot; &quot;(defn pie\n  \&quot;incomplete transition are bad\&quot;\n  [data]\n  (let [pie-chart (.sort (.pie u/layout) nil)\n        p1 (pie-chart (js&gt; data))\n        p2 (pie-chart (js&gt; (vec (shuffle data))))\n        new-arc (.. (u/arc) (outerRadius \&quot;100\&quot;) (innerRadius \&quot;70\&quot;))\n        color-scale (.. u/scale linear (domain (js&gt; (bounds data))) (range #js [\&quot;blue\&quot; \&quot;red\&quot;]))\n        arc-tween (fn [a]\n                   (this-as this\n                     (let [i (js/d3.interpolate (.-_curent this) a)]\n                       (aset this \&quot;_current\&quot; (i 0))\n                       (fn [t] (js/newArc (i t))))))\n        svg (svg)]\n    (&gt;&gt; svg\n        [:append \&quot;g\&quot;]\n        [:attr [\&quot;transform\&quot; \&quot;translate(250,250)\&quot;]]\n        [:selectAll \&quot;path\&quot;]\n        [:data p1]\n        [:enter]\n        [:append \&quot;path\&quot;]\n        [:attr [\&quot;d\&quot; new-arc]]\n        (u/styles {:fill         (fn [d] (color-scale (.-data d)))\n                   :opacity      \&quot;0.5\&quot;\n                   :stroke       \&quot;black\&quot;\n                   :stroke-width \&quot;2px\&quot;}))\n    (&gt;&gt; svg\n        [:selectAll \&quot;path\&quot;]\n        [:data p2]\n        [:transition]\n        [:delay 1000]\n        [:duration 1000]\n        [:attrTween [\&quot;d\&quot; arc-tween]]\n        [:style [\&quot;fill\&quot; (fn [d] (color-scale (.-data d)))]])))&quot; &quot;(defn pie\n  \&quot;incomplete transition are bad\&quot;\n  [data]\n  (let [pie-chart (.sort (.pie u/layout) nil)\n        p1 (pie-chart (js&gt; data))\n        p2 (pie-chart (js&gt; (vec (shuffle data))))\n        new-arc (.. (u/arc) (outerRadius \&quot;100\&quot;) (innerRadius \&quot;70\&quot;))\n        color-scale (.. u/scale linear (domain (js&gt; (bounds data))) (range #js [\&quot;blue\&quot; \&quot;red\&quot;]))\n        arc-tween (fn [a]\n                   (this-as this\n                     (let [i (js/d3.interpolate (.-_current this) a)]\n                       (aset this \&quot;_current\&quot; (i 0))\n                       (fn [t] (js/newArc (i t))))))\n        svg (svg)]\n    (&gt;&gt; svg\n        [:append \&quot;g\&quot;]\n        [:attr [\&quot;transform\&quot; \&quot;translate(250,250)\&quot;]]\n        [:selectAll \&quot;path\&quot;]\n        [:data p1]\n        [:enter]\n        [:append \&quot;path\&quot;]\n        [:attr [\&quot;d\&quot; new-arc]]\n        (u/styles {:fill         (fn [d] (color-scale (.-data d)))\n                   :opacity      \&quot;0.5\&quot;\n                   :stroke       \&quot;black\&quot;\n                   :stroke-width \&quot;2px\&quot;}))\n    (&gt;&gt; svg\n        [:selectAll \&quot;path\&quot;]\n        [:data p2]\n        [:transition]\n        [:delay 1000]\n        [:duration 1000]\n        [:attrTween [\&quot;d\&quot; arc-tween]]\n        [:style [\&quot;fill\&quot; (fn [d] (color-scale (.-data d)))]])))&quot; &quot;(defn pie\n  \&quot;incomplete transition are bad\&quot;\n  [data]\n  (let [pie-chart (.sort (.pie u/layout) nil)\n        p1 (pie-chart (js&gt; data))\n        p2 (pie-chart (js&gt; (vec (shuffle data))))\n        new-arc (.. (u/arc) (outerRadius \&quot;100\&quot;) (innerRadius \&quot;70\&quot;))\n        color-scale (.. u/scale linear (domain (js&gt; (bounds data))) (range #js [\&quot;blue\&quot; \&quot;red\&quot;]))\n        arc-tween (fn [a]\n                   (this-as this\n                     (let [i (js/d3.interpolate (aget this \&quot;_current\&quot;) a)]\n                       (aset this \&quot;_current\&quot; (i 0))\n                       (fn [t] (js/newArc (i t))))))\n        svg (svg)]\n    (&gt;&gt; svg\n        [:append \&quot;g\&quot;]\n        [:attr [\&quot;transform\&quot; \&quot;translate(250,250)\&quot;]]\n        [:selectAll \&quot;path\&quot;]\n        [:data p1]\n        [:enter]\n        [:append \&quot;path\&quot;]\n        [:attr [\&quot;d\&quot; new-arc]]\n        (u/styles {:fill         (fn [d] (color-scale (.-data d)))\n                   :opacity      \&quot;0.5\&quot;\n                   :stroke       \&quot;black\&quot;\n                   :stroke-width \&quot;2px\&quot;}))\n    (&gt;&gt; svg\n        [:selectAll \&quot;path\&quot;]\n        [:data p2]\n        [:transition]\n        [:delay 1000]\n        [:duration 1000]\n        [:attrTween [\&quot;d\&quot; arc-tween]]\n        [:style [\&quot;fill\&quot; (fn [d] (color-scale (.-data d)))]])))&quot; &quot;(defn pie\n  \&quot;incomplete transition are bad\&quot;\n  [data]\n  (let [pie-chart (.sort (.pie u/layout) nil)\n        p1 (pie-chart (js&gt; data))\n        p2 (pie-chart (js&gt; (vec (shuffle data))))\n        new-arc (.. (u/arc) (outerRadius \&quot;100\&quot;) (innerRadius \&quot;70\&quot;))\n        color-scale (.. u/scale linear (domain (js&gt; (bounds data))) (range #js [\&quot;blue\&quot; \&quot;red\&quot;]))\n        arc-tween (fn [a]\n                   (this-as this\n                     (println this)\n                     (let [i (js/d3.interpolate (aget this \&quot;_current\&quot;) a)]\n                       (aset this \&quot;_current\&quot; (i 0))\n                       (fn [t] (js/newArc (i t))))))\n        svg (svg)]\n    (&gt;&gt; svg\n        [:append \&quot;g\&quot;]\n        [:attr [\&quot;transform\&quot; \&quot;translate(250,250)\&quot;]]\n        [:selectAll \&quot;path\&quot;]\n        [:data p1]\n        [:enter]\n        [:append \&quot;path\&quot;]\n        [:attr [\&quot;d\&quot; new-arc]]\n        (u/styles {:fill         (fn [d] (color-scale (.-data d)))\n                   :opacity      \&quot;0.5\&quot;\n                   :stroke       \&quot;black\&quot;\n                   :stroke-width \&quot;2px\&quot;}))\n    (&gt;&gt; svg\n        [:selectAll \&quot;path\&quot;]\n        [:data p2]\n        [:transition]\n        [:delay 1000]\n        [:duration 1000]\n        [:attrTween [\&quot;d\&quot; arc-tween]]\n        [:style [\&quot;fill\&quot; (fn [d] (color-scale (.-data d)))]])))&quot; &quot;(defn pie\n  \&quot;incomplete transition are bad\&quot;\n  [data]\n  (let [pie-chart (.sort (.pie u/layout) nil)\n        p1 (pie-chart (js&gt; data))\n        p2 (pie-chart (js&gt; (vec (shuffle data))))\n        new-arc (.. (u/arc) (outerRadius \&quot;100\&quot;) (innerRadius \&quot;70\&quot;))\n        color-scale (.. u/scale linear (domain (js&gt; (bounds data))) (range #js [\&quot;blue\&quot; \&quot;red\&quot;]))\n        arc-tween (fn [a]\n                   (this-as this\n                     (println (aget this \&quot;_current\&quot;))\n                     (let [i (js/d3.interpolate (aget this \&quot;_current\&quot;) a)]\n                       (aset this \&quot;_current\&quot; (i 0))\n                       (fn [t] (js/newArc (i t))))))\n        svg (svg)]\n    (&gt;&gt; svg\n        [:append \&quot;g\&quot;]\n        [:attr [\&quot;transform\&quot; \&quot;translate(250,250)\&quot;]]\n        [:selectAll \&quot;path\&quot;]\n        [:data p1]\n        [:enter]\n        [:append \&quot;path\&quot;]\n        [:attr [\&quot;d\&quot; new-arc]]\n        (u/styles {:fill         (fn [d] (color-scale (.-data d)))\n                   :opacity      \&quot;0.5\&quot;\n                   :stroke       \&quot;black\&quot;\n                   :stroke-width \&quot;2px\&quot;}))\n    (&gt;&gt; svg\n        [:selectAll \&quot;path\&quot;]\n        [:data p2]\n        [:transition]\n        [:delay 1000]\n        [:duration 1000]\n        [:attrTween [\&quot;d\&quot; arc-tween]]\n        [:style [\&quot;fill\&quot; (fn [d] (color-scale (.-data d)))]])))&quot; &quot;(defn pie\n  \&quot;incomplete transition are bad\&quot;\n  [data]\n  (let [pie-chart (.sort (.pie u/layout) nil)\n        p1 (pie-chart (js&gt; data))\n        p2 (pie-chart (js&gt; (vec (shuffle data))))\n        new-arc (.. (u/arc) (outerRadius \&quot;100\&quot;) (innerRadius \&quot;70\&quot;))\n        color-scale (.. u/scale linear (domain (js&gt; (bounds data))) (range #js [\&quot;blue\&quot; \&quot;red\&quot;]))\n        arc-tween (fn [a]\n                   (this-as this\n                     (js/console.log this)\n                     (let [i (js/d3.interpolate (aget this \&quot;_current\&quot;) a)]\n                       (aset this \&quot;_current\&quot; (i 0))\n                       (fn [t] (js/newArc (i t))))))\n        svg (svg)]\n    (&gt;&gt; svg\n        [:append \&quot;g\&quot;]\n        [:attr [\&quot;transform\&quot; \&quot;translate(250,250)\&quot;]]\n        [:selectAll \&quot;path\&quot;]\n        [:data p1]\n        [:enter]\n        [:append \&quot;path\&quot;]\n        [:attr [\&quot;d\&quot; new-arc]]\n        (u/styles {:fill         (fn [d] (color-scale (.-data d)))\n                   :opacity      \&quot;0.5\&quot;\n                   :stroke       \&quot;black\&quot;\n                   :stroke-width \&quot;2px\&quot;}))\n    (&gt;&gt; svg\n        [:selectAll \&quot;path\&quot;]\n        [:data p2]\n        [:transition]\n        [:delay 1000]\n        [:duration 1000]\n        [:attrTween [\&quot;d\&quot; arc-tween]]\n        [:style [\&quot;fill\&quot; (fn [d] (color-scale (.-data d)))]])))&quot; &quot;(pie [2 10 6 7])&quot; &quot;(word-cloud (gen-words 50))&quot; &quot;(let [words [\&quot;You don't know about me without you have read a book called The Adventures of Tom Sawyer but that ain't no matter.\&quot;,\n                 \&quot;The boy with fair hair lowered himself down the last few feet of rock and began to pick his way toward the lagoon.\&quot;,\n                 \&quot;When Mr. Bilbo Baggins of Bag End announced that he would shortly be celebrating his eleventy-first birthday with a party of special magnificence, there was much talk and excitement in Hobbiton.\&quot;,\n                 \&quot;It was inevitable: the scent of bitter almonds always reminded him of the fate of unrequited love.\&quot;]\n          wgen #(mapv (fn [t] {:text      t\n                               :frequency (+ 10 (rand-nth [10 30 50]))})\n                      (clojure.string/split (rand-nth words) #\&quot; \&quot;))\n          wc (wc2 {:selector \&quot;#app\&quot;\n                   :width    500\n                   :height   500\n                   :rotate   (fn [] (rand-nth [0 90 -90]))})]\n      (js/setInterval #(wc (wgen)) 2000))&quot; &quot;(get-json \&quot;data/tweets.json\&quot;\n            (fn [r]\n              (draw-pack\n                {:id     \&quot;All\&quot;\n                 :values (.. js/d3\n                             nest\n                             (key #(.-user %))\n                             (entries (aget r \&quot;tweets\&quot;)))}\n                {:color-scale (.. u/scale\n                                  linear\n                                  (domain #js [0 2])\n                                  (range #js [\&quot;lightcoral\&quot; \&quot;#FAFAFA\&quot;]))\n                 :children    #(.-values %)\n                 :value       #(+ (count (.-retweets %)) (count (.-favorites %)) 1)})))&quot; &quot;(get-json \&quot;data/flare-pack.json\&quot;\n            (fn [r]\n              (draw-pack\n                r\n                {:color-scale (.. u/scale\n                                  linear\n                                  (domain #js [0 5])\n                                  (range #js [\&quot;lightcoral\&quot; \&quot;#FAFAFA\&quot;]))})))&quot; &quot;(rvoronoi {:selector \&quot;#app\&quot;\n             :width    400\n             :height   400\n             :data     [[-50 50 120 40 (- 0.01)]\n                        [-50 50 30 10 (+ 0.03)]\n                        [-50 50 60 3 (- 0.05)]\n                        [-50 50 15 4 (- 0.02)]\n                        [-50 50 0 1 (- 0.02)]\n                        [140 (- 120) 80 10 (- 0.02)]\n                        [140 (- 120) 100 6 (+ 0.02)]\n                        [140 (- 120) 20 6 (- 0.02)]\n                        [180 (+ 120) 40 5 (+ 0.02)]\n                        [180 (+ 120) 60 8 (- 0.02)]]\n             :styles   (fn [x] (.. x (style \&quot;fill\&quot; \&quot;lightskyblue\&quot;) (style \&quot;stroke\&quot; \&quot;white\&quot;)))\n             :fill     \&quot;lightsky-blue\&quot;})&quot; &quot;(voro2\n    {:height    800\n     :width     800\n     :extra     50\n     :selector  \&quot;#app\&quot;\n     :n-polygon 700\n     :colors    [\&quot;darkviolet\&quot; \&quot;#FAFAFA\&quot;]})&quot; &quot;(clear-svg!)&quot; &quot;(defn voro1 [{:keys [width height selector n-polygon color-scale]}]\n  (let [svg (*&gt; [:select selector]\n                [:append \&quot;svg\&quot;]\n                (u/attrs {:width width :height height})\n                [:append \&quot;g\&quot;])\n        path (&gt;&gt; svg [:selectAll \&quot;path\&quot;])\n        voronoi (.clipExtent (js/d3.geom.voronoi) (js&gt; [[0 0] [width height]]))\n        points (repeatedly n-polygon (fn [] [(rand-int width) (rand-int height)]))\n        paths-data (mapv (fn [d] (println [d (when d (str \&quot;M\&quot; (.join d \&quot;L\&quot;) \&quot;Z\&quot;))]) \n                           (when d (str \&quot;M\&quot; (.join d \&quot;L\&quot;) \&quot;Z\&quot;)))\n                         (voronoi (js&gt; points)))\n        path (&gt;&gt; path\n                 [:data [(js&gt; paths-data)]])]\n\n    (&gt;&gt; path\n        [:enter]\n        [:append \&quot;path\&quot;]\n        (u/styles {:fill   #(color-scale (mod %2 20))\n                   :stroke #(color-scale (mod %2 20))}))\n\n    (&gt;&gt; path [:attr [\&quot;d\&quot; str]])\n    (&gt;&gt; path [:exit] [:remove])))&quot; &quot;(voro1\n    {:height      800\n     :width       800\n     :selector    \&quot;#app\&quot;\n     :n-polygon   500\n     :color-scale (.. u/scale\n                      linear\n                      (domain #js [0 20])\n                      (range #js [\&quot;tomato\&quot; \&quot;#FAFAFA\&quot;]))})&quot; &quot;(ns d3.moving-voronoi\n  (:require-macros [d3.utils :refer [attrs&gt; styles&gt;]])\n  (:require cljsjs.d3\n            [d3.utils :as u]\n            [d3.prob :as p]\n            [d3.palettes :as palettes]\n            #_[d3.multis :refer [draw animate]]))&quot; &quot;(defn voronoi [width height]\n  (.clipExtent\n    (u/voronoi)\n    (clj-&gt;js [[0 0]\n              [width height]])))&quot; &quot;(defn svg [parent-selector [width height]]\n  (.. js/d3\n      (select parent-selector)\n      (append \&quot;svg\&quot;)\n      (attr \&quot;width\&quot; width)\n      (attr \&quot;height\&quot; (or height width))))&quot; &quot;(defn moving-particles [{:keys [width height n speed radius]}]\n  (let [max-rad (if (number? radius) radius (apply max radius))\n        points (atom (mapv (fn [_] {:x   (p/realize (p/&gt;i&gt; max-rad (- width max-rad)))\n                                    :y   (p/realize (p/&gt;i&gt; max-rad (- height max-rad)))\n                                    :vx  (p/realize speed)\n                                    :vy  (p/realize speed)\n                                    :rad (p/realize radius)})\n                           (range (p/realize n))))\n        _ (u/timer (fn [_]\n                     (reset! points\n                             (mapv\n                               (fn [{:keys [x y vx vy rad]}]\n                                 (let [vx (if (or (&gt; (+ x vx) (- width rad)) (&lt; (+ x vx) rad)) (- vx) vx)\n                                       vy (if (or (&gt; (+ y vy) (- height rad)) (&lt; (+ y vy) rad)) (- vy) vy)]\n                                   {:x   (+ x vx)\n                                    :y   (+ y vy)\n                                    :vx  vx\n                                    :vy  vy\n                                    :rad rad}))\n                               @points))\n                     false))]\n    points))&quot; &quot;(moving-particles\n    {:width  500\n     :height 500\n     :radius (p/&gt;f&gt; 10 30)\n     :n      (p/&gt;i&gt; 10 20)\n     :speed  (p/&gt;f&gt; -0.5 0.5)})&quot; &quot;(defn moving-circles [{:keys [selector width height radius n speed] :as opts}]\n  (let [points (moving-particles opts)\n        pts (.. (svg selector [width height])\n                (append \&quot;g\&quot;)\n                (selectAll \&quot;circle\&quot;)\n                (data (clj-&gt;js @points))\n                (enter)\n                (append \&quot;circle\&quot;)\n                (attr \&quot;r\&quot; #(.-rad %))\n                (attr \&quot;cx\&quot; #(.-x %))\n                (attr \&quot;cy\&quot; #(.-y %)))]\n\n    (u/timer (fn [_]\n               (let [ps @points]\n                 (.. pts\n                     (attr \&quot;cx\&quot; #(:x (get ps %2)))\n                     (attr \&quot;cy\&quot; #(:y (get ps %2))))\n                 false)))))&quot; &quot;(moving-circles\n    {:selector \&quot;#app\&quot;\n     :width    500\n     :height   500\n     :radius   (p/&gt;f&gt; 10 30)\n     :n        (p/&gt;i&gt; 10 20)\n     :speed    (p/&gt;f&gt; -0.5 0.5)})&quot; &quot;(defn colors-req [w]\n  (fn [cb]\n    (get-json (str \&quot;http://www.colourlovers.com/api/colors/\&quot; w \&quot;?format=json\&quot;)\n              (comp cb colors-&gt;map))))&quot; &quot;(colors-req \&quot;top\&quot;)&quot; &quot;(defn colors-req [w]\n  (fn [cb]\n    (get-json (str \&quot;https://crossorigin.me/http://www.colourlovers.com/api/colors/\&quot; w \&quot;?format=json\&quot;)\n              (comp cb colors-&gt;map))))&quot; &quot;(def top-colors (colors-req \&quot;top\&quot;))&quot; &quot;(defn moving-voronoi [{:keys [selector width height radius n speed palette] :as opts}]\n  (let [points (moving-particles (assoc opts :radius 1))\n        color (p/one-of (or palette (val (first (shuffle (seq (:top @palettes/color-lovers)))))))\n        vor-obj (voronoi width height)\n\n        pts (.. (svg selector [width height])\n                (append \&quot;g\&quot;)\n                (selectAll \&quot;path\&quot;)\n                (data (clj-&gt;js @points))\n                (enter)\n                (append \&quot;path\&quot;)\n                (style \&quot;fill\&quot; #(p/realize color)))\n\n\n        line (.. js/d3 -svg line (interpolate \&quot;basis-closed\&quot;))\n\n        three-polate (fn [[[x0 y0] [x1 y1]]]\n                       [[x0 y0]\n                        [(/ (+ (* 2 x0) x1) 3), (/ (+ (* 2 y0) y1) 3)]\n                        [(/ (+ (* 2 x1) x0) 3), (/ (+ (* 2 y1) y0) 3)]])\n\n        resample (fn [pts]\n                   (let [pairs (map vector (cons (last pts) pts) pts)]\n                     (mapcat three-polate pairs)))]\n\n    (u/timer (fn [_]\n               (let [ps @points\n                     vnoi (vor-obj (clj-&gt;js (mapv (juxt :x :y) ps)))]\n                 (-&gt; pts (.attr \&quot;d\&quot; (fn [pt i] (line (clj-&gt;js (resample (nth vnoi i)))))))\n                 false)))))&quot; &quot;(:top @palettes/color-lovers)&quot; &quot;(cl/top-palettes #(swap! color-lovers assoc :top %))&quot; &quot;(do @color-lovers)&quot; &quot;(top-colors #(println %))&quot; &quot;(new-palettes #(println \&quot;new-palettes\&quot; %))&quot; &quot;(let [[c1 c2 c3 c4] (shuffle (first (shuffle (vals palettes/wes-anderson))))\n        flower {:origin (vec2 150 150)\n                :lrs    (mapv (fn [id [a b c]] (assoc (flower-lr a b) :speed (p/realize (p/&gt;f&gt; -0.01 0.01)) :styles c :id id))\n                              (range)\n                              [[1 30 (styles&gt; {\&quot;fill\&quot; c1})]\n                               [6 70 (styles&gt; {\&quot;fill\&quot; c2})]\n                               [10 110 (styles&gt; {\&quot;fill\&quot; c3})]\n                               [12 150 (styles&gt; {\&quot;fill\&quot; c4})]])}\n\n        fps (flower-points* flower)\n        points (flatten fps)\n        vor (voronoi* [300 300] points)\n\n        layers (-&gt;&gt; (group-by (comp :id :lr :point) vor)\n                    sort\n                    (mapv second))\n\n        rotating-layers (mapv #(rotating-points (:origin flower) (:speed %2) %1)\n                              fps\n                              (:lrs flower))\n\n        petals (-&gt; (svg \&quot;#app\&quot; [300 300])\n                   (.append \&quot;g\&quot;)\n                   (.attr \&quot;class\&quot; \&quot;flower\&quot;)\n                   (.selectAll \&quot;.flower-layer\&quot;)\n                   (.data (-&gt;array layers))\n                   (.enter)\n                   (.append \&quot;g\&quot;)\n                   (.attr \&quot;class\&quot; \&quot;flower-layer\&quot;)\n                   (.selectAll \&quot;path\&quot;)\n                   (.data -&gt;array)\n                   (.enter)\n                   (.append \&quot;path\&quot;)\n                   (.attr \&quot;class\&quot; \&quot;petal\&quot;)\n                   (.attr \&quot;d\&quot; #(polygon-&gt;line (map vec2 (:polygon %))))\n                   (each* #(-&gt; % :point :lr :styles)))]\n\n    (u/timer (fn [_]\n               (let [layers (map deref rotating-layers)\n                     vor (voronoi* [300 300] (apply concat layers))\n                     layers (group-by (comp :id :lr :point) vor)]\n                 (-&gt; petals (.attr \&quot;d\&quot;\n                                   (fn [pt i]\n                                     (polygon-&gt;line\n                                       (map vec2\n                                            (:polygon\n                                              (nth (get layers (get-in pt [:point :lr :id])) i))))))))\n               false)))&quot; &quot;(clj-&gt;js [[20 20] [30 30] [0 15] [70 90] [0 89] [50 15]])&quot; &quot;(voronoi 100 100)&quot; &quot;(comment\n  ( (voronoi 100 100) (clj-&gt;js [[20 20] [30 30] [0 15] [70 90] [0 89] [50 15]]))\n  (moving-voronoi\n    {:selector \&quot;#app\&quot;\n     :width    500\n     :height   500\n     :speed    (p/&gt;f&gt; -1 1)\n     :n        100}))&quot; &quot;( (voronoi 100 100) (clj-&gt;js [[20 20] [30 30] [0 15] [70 90] [0 89] [50 15]]))&quot; &quot;(defn moving-voronoi [{:keys [selector width height radius n speed palette] :as opts}]\n  (let [points (moving-particles (assoc opts :radius 1))\n        color (p/one-of (or palette (val (first (shuffle (seq (:top @palettes/color-lovers)))))))\n        vor-obj (voronoi width height)\n\n        pts (.. (svg selector [width height])\n                (append \&quot;g\&quot;)\n                (selectAll \&quot;path\&quot;)\n                (data (clj-&gt;js @points))\n                (enter)\n                (append \&quot;path\&quot;)\n                (style \&quot;fill\&quot; #(p/realize color)))\n\n\n        line (.. js/d3 -svg line (interpolate \&quot;basis-closed\&quot;))\n\n        three-polate (fn [[[x0 y0] [x1 y1]]]\n                       [[x0 y0]\n                        [(/ (+ (* 2 x0) x1) 3), (/ (+ (* 2 y0) y1) 3)]\n                        [(/ (+ (* 2 x1) x0) 3), (/ (+ (* 2 y1) y0) 3)]])\n\n        resample (fn [pts]\n                   (let [pairs (map vector (cons (last pts) pts) pts)]\n                     (mapcat three-polate pairs)))]\n\n    (u/timer (fn [_]\n               (let [ps @points\n                     vnoi (vor-obj (clj-&gt;js (mapv (juxt :x :y) ps)))]\n                 (-&gt; pts\n                     (.attr \&quot;d\&quot; (fn [pt i] (line (clj-&gt;js (resample (nth vnoi i))))))\n                     (.attr \&quot;transform\&quot; (fn [_ _] \&quot;scale(0.5,0.5)\&quot;)))\n                 false)))))&quot; &quot;(defn moving-voronoi [{:keys [selector width height radius n speed palette] :as opts}]\n  (let [points (moving-particles (assoc opts :radius 1))\n        color (p/one-of (or palette (val (first (shuffle (seq (:top @palettes/color-lovers)))))))\n        vor-obj (voronoi width height)\n\n        pts (.. (svg selector [width height])\n                (append \&quot;g\&quot;)\n                (selectAll \&quot;path\&quot;)\n                (data (clj-&gt;js @points))\n                (enter)\n                (append \&quot;path\&quot;)\n                (style \&quot;fill\&quot; #(p/realize color)))\n\n\n        line (.. js/d3 -svg line (interpolate \&quot;basis-closed\&quot;))\n\n        three-polate (fn [[[x0 y0] [x1 y1]]]\n                       [[x0 y0]\n                        [(/ (+ (* 2 x0) x1) 3), (/ (+ (* 2 y0) y1) 3)]\n                        [(/ (+ (* 2 x1) x0) 3), (/ (+ (* 2 y1) y0) 3)]])\n\n        resample (fn [pts]\n                   (let [pairs (map vector (cons (last pts) pts) pts)]\n                     (mapcat three-polate pairs)))]\n\n    (u/timer (fn [_]\n               (let [ps @points\n                     vnoi (vor-obj (clj-&gt;js (mapv (juxt :x :y) ps)))]\n                 (-&gt; pts\n                     (.attr \&quot;d\&quot; (fn [pt i] (line (clj-&gt;js (resample (nth vnoi i))))))\n                     (.attr \&quot;transform\&quot; (fn [pt _] \&quot;scale(0.5,1.5)\&quot;))\n                     (.attr \&quot;transform-origin\&quot; (fn [pt _] \&quot;50% 50%\&quot;)))\n                 false)))))&quot; &quot;(.. (svg selector [1000 1000])\n      (append \&quot;g\&quot;)\n      (selectAll \&quot;path\&quot;)\n      (data (clj-&gt;js [[10 10] [100 10] [50 50]]))\n      (enter)\n      (append \&quot;path\&quot;)\n      (style \&quot;fill\&quot; \&quot;blue\&quot;))&quot; &quot;(.. (svg \&quot;#app\&quot; [1000 1000])\n      (append \&quot;g\&quot;)\n      (selectAll \&quot;path\&quot;)\n      (data (clj-&gt;js [[10 10] [100 10] [50 50]]))\n      (enter)\n      (append \&quot;path\&quot;)\n      (style \&quot;fill\&quot; \&quot;blue\&quot;))&quot; &quot;(.. (svg \&quot;#app\&quot; [1000 1000])\n      (append \&quot;g\&quot;)\n      (selectAll \&quot;path\&quot;)\n      (data (clj-&gt;js (map (fn [[x y]] {:x x :y y}) [[10 10] [100 10] [50 50]])))\n      (enter)\n      (append \&quot;path\&quot;)\n      (style \&quot;fill\&quot; \&quot;blue\&quot;))&quot; &quot;(def scatter-data\n  [{:friends 5 :salary 22000}\n   {:friends 3 :salary 18000}\n   {:friends 10 :salary 88000}\n   {:friends 0 :salary 180000}\n   {:friends 27 :salary 56000}\n   {:friends 8 :salary 74000}])&quot; &quot;(&gt;&gt; (svg)\n      [:append \&quot;circle\&quot;]\n      (u/attrs {:r 20 :cx 20 :cy 20})\n      (u/styles {:fill \&quot;red\&quot;})\n      [:transition]\n      [:delay 1000]\n      [:duration 5000]\n      (u/attrs {:r 40 :cx 140 :cy 140})\n      (u/styles {:fill \&quot;blue\&quot;}))&quot; &quot;(&gt;&gt; (svg)\n      [:append \&quot;rect\&quot;]\n      (u/attrs {:x 65 :y 65 :width 150 :height 80})\n      (u/styles {:fill \&quot;red\&quot;}))&quot; &quot;(&gt;&gt; (svg)\n      [:append \&quot;rect\&quot;]\n      (u/attrs {:x 65 :y 65 :width 150 :height 80 :transform \&quot;translate(140 105) skewX(60) translate(-140 -105)\&quot;})\n      (u/styles {:fill \&quot;red\&quot;}))&quot; &quot;(&gt;&gt; (svg)\n      [:append \&quot;rect\&quot;]\n      (u/attrs {:x 65 :y 65 :width 150 :height 80 :transform \&quot;translate(140 105) scale(0.5,0.5) translate(-140 -105)\&quot;})\n      (u/styles {:fill \&quot;red\&quot;}))&quot; &quot;(let [svg (svg)]\n    (&gt;&gt; svg\n        [:append \&quot;rect\&quot;]\n        (u/attrs {:x 65 :y 65 :width 150 :height 80})\n        (u/styles {:fill \&quot;red\&quot;}))\n    (&gt;&gt; svg\n      [:append \&quot;rect\&quot;]\n      (u/attrs {:x 65 :y 65 :width 150 :height 80 :transform \&quot;translate(140 105) scale(0.5,0.5) translate(-140 -105)\&quot;})\n      (u/styles {:fill \&quot;blue\&quot;})))&quot; &quot;(&gt;&gt; svg\n        [:append \&quot;rect\&quot;]\n        (u/attrs {:d pd :transform \&quot;translate(140 105) scale(0.5,0.5) translate(-140 -105)\&quot;})\n        (u/styles {:fill \&quot;blue\&quot;}))&quot; &quot;(let [svg (svg)\n        pd \&quot;M213.1,6.7c-32.4-14.4-73.7,0-88.1,30.6C110.6,4.9,67.5-9.5,36.9,6.7C2.8,22.9-13.4,62.4,13.5,110.9\\n  C33.3,145.1,67.5,170.3,125,217c59.3-46.7,93.5-71.9,111.5-106.1C263.4,64.2,247.2,22.9,213.1,6.7z\&quot;]\n    (&gt;&gt; svg\n        [:append \&quot;path\&quot;]\n        (u/attrs {:d pd})\n        (u/styles {:fill \&quot;red\&quot;}))\n    (&gt;&gt; svg\n        [:append \&quot;rect\&quot;]\n        (u/attrs {:d pd :transform \&quot;translate(140 105) scale(0.5,0.5) translate(-140 -105)\&quot;})\n        (u/styles {:fill \&quot;blue\&quot;})))&quot; &quot;(let [svg (svg)\n        pd \&quot;M213.1,6.7c-32.4-14.4-73.7,0-88.1,30.6C110.6,4.9,67.5-9.5,36.9,6.7C2.8,22.9-13.4,62.4,13.5,110.9\\n  C33.3,145.1,67.5,170.3,125,217c59.3-46.7,93.5-71.9,111.5-106.1C263.4,64.2,247.2,22.9,213.1,6.7z\&quot;]\n    (&gt;&gt; svg\n        [:append \&quot;path\&quot;]\n        (u/attrs {:d pd})\n        (u/styles {:fill \&quot;red\&quot;}))\n    (&gt;&gt; svg\n        [:append \&quot;rect\&quot;]\n        (u/attrs {:d pd :transform \&quot;scale(0.5,0.5)\&quot;})\n        (u/styles {:fill \&quot;blue\&quot;})))&quot; &quot;(let [svg (svg)\n        pd \&quot;M213.1,6.7c-32.4-14.4-73.7,0-88.1,30.6C110.6,4.9,67.5-9.5,36.9,6.7C2.8,22.9-13.4,62.4,13.5,110.9\\n  C33.3,145.1,67.5,170.3,125,217c59.3-46.7,93.5-71.9,111.5-106.1C263.4,64.2,247.2,22.9,213.1,6.7z\&quot;]\n    (&gt;&gt; svg\n        [:append \&quot;path\&quot;]\n        (u/attrs {:d pd})\n        (u/styles {:fill \&quot;red\&quot;}))\n    (&gt;&gt; svg\n        [:append \&quot;path\&quot;]\n        (u/attrs {:d pd :transform \&quot;scale(0.5,0.5)\&quot;})\n        (u/styles {:fill \&quot;blue\&quot;})))&quot; &quot;(let [svg (svg)\n        pd \&quot;M213.1,6.7c-32.4-14.4-73.7,0-88.1,30.6C110.6,4.9,67.5-9.5,36.9,6.7C2.8,22.9-13.4,62.4,13.5,110.9\\n  C33.3,145.1,67.5,170.3,125,217c59.3-46.7,93.5-71.9,111.5-106.1C263.4,64.2,247.2,22.9,213.1,6.7z\&quot;]\n    (&gt;&gt; svg\n        [:append \&quot;path\&quot;]\n        (u/attrs {:d pd})\n        (u/styles {:fill \&quot;red\&quot;}))\n    (&gt;&gt; svg\n        [:append \&quot;path\&quot;]\n        (u/attrs {:d pd :transform \&quot;translate(140 105) scale(0.5,0.5) translate(-140 -105)\&quot;})\n        (u/styles {:fill \&quot;blue\&quot;})))&quot; &quot;(js/d3.geom.polygon [[10 10] [100 10] [100 100] [10 100]])&quot; &quot;(js/d3.geom.polygon (clj-&gt;js [[10 10] [100 10] [100 100] [10 100]]))&quot; &quot;(js/d3.geom.polygonCentroid (js/d3.geom.polygon (clj-&gt;js [[10 10] [100 10] [100 100] [10 100]])))&quot; &quot;(js/d3.polygonCentroid (js/d3.geom.polygon (clj-&gt;js [[10 10] [100 10] [100 100] [10 100]])))&quot; &quot;(.centroid (js/d3.geom.polygon (clj-&gt;js [[10 10] [100 10] [100 100] [10 100]])))&quot; &quot;(let [svg (svg)\n        points [[10 10] [100 10] [100 100] [10 100]]\n        centroid (.centroid (js/d3.geom.polygon (clj-&gt;js points)))\n        line (.. js/d3 -svg line (interpolate \&quot;basis-closed\&quot;))\n        _ (println (line (clj-&gt;js points)))\n        pd \&quot;M213.1,6.7c-32.4-14.4-73.7,0-88.1,30.6C110.6,4.9,67.5-9.5,36.9,6.7C2.8,22.9-13.4,62.4,13.5,110.9\\n  C33.3,145.1,67.5,170.3,125,217c59.3-46.7,93.5-71.9,111.5-106.1C263.4,64.2,247.2,22.9,213.1,6.7z\&quot;]\n    \n    (&gt;&gt; svg\n        [:append \&quot;path\&quot;]\n        (u/attrs {:d pd})\n        (u/styles {:fill \&quot;red\&quot;}))\n    (&gt;&gt; svg\n        [:append \&quot;path\&quot;]\n        (u/attrs {:d pd :transform \&quot;translate(140 105) scale(0.5,0.5) translate(-140 -105)\&quot;})\n        (u/styles {:fill \&quot;blue\&quot;})))&quot; &quot;(let [svg (svg)\n        points [[10 10] [100 10] [100 100] [10 100]]\n        centroid (.centroid (js/d3.geom.polygon (clj-&gt;js points)))\n        line (.. js/d3 -svg line (interpolate \&quot;basis-closed\&quot;))\n        _ (println (line (clj-&gt;js points)))\n        pd (line (clj-&gt;js points))]\n    \n    (&gt;&gt; svg\n        [:append \&quot;path\&quot;]\n        (u/attrs {:d pd})\n        (u/styles {:fill \&quot;red\&quot;}))\n    (&gt;&gt; svg\n        [:append \&quot;path\&quot;]\n        (u/attrs {:d pd :transform \&quot;translate(140 105) scale(0.5,0.5) translate(-140 -105)\&quot;})\n        (u/styles {:fill \&quot;blue\&quot;})))&quot; &quot;(let [svg (svg)\n        points [[10 10] [100 10] [100 100] [10 100]]\n        [cx cy :as centroid] (js-&gt;clj (.centroid (js/d3.geom.polygon (clj-&gt;js points))))\n        line (.. js/d3 -svg line (interpolate \&quot;basis-closed\&quot;))\n        _ (println (line (clj-&gt;js points)))\n        pd (line (clj-&gt;js points))]\n\n    (&gt;&gt; svg\n        [:append \&quot;path\&quot;]\n        (u/attrs {:d pd})\n        (u/styles {:fill \&quot;red\&quot;}))\n    (&gt;&gt; svg\n        [:append \&quot;path\&quot;]\n        (u/attrs {:d pd :transform (str \&quot;translate(\&quot;cx \&quot; \&quot; cy\&quot;) scale(0.5,0.5) translate(\&quot; (- cx) \&quot; \&quot; (- cy) \&quot;)\&quot;)})\n        (u/styles {:fill \&quot;blue\&quot;})))&quot; &quot;(defn moving-voronoi [{:keys [selector width height radius n speed palette] :as opts}]\n  (let [points (moving-particles (assoc opts :radius 1))\n        color (p/one-of (or palette (val (first (shuffle (seq (:top @palettes/color-lovers)))))))\n        vor-obj (voronoi width height)\n        svg (svg selector [width height])\n\n        pts (.. svg\n                (append \&quot;g\&quot;)\n                (selectAll \&quot;path\&quot;)\n                (data (clj-&gt;js @points))\n                (enter)\n                (append \&quot;path\&quot;)\n                (style \&quot;fill\&quot; #(p/realize color)))\n\n        pts2 (.. svg\n                (append \&quot;g\&quot;)\n                (selectAll \&quot;path\&quot;)\n                (data (clj-&gt;js @points))\n                (enter)\n                (append \&quot;path\&quot;)\n                (style \&quot;fill\&quot; #(p/realize color)))\n\n\n        line (.. js/d3 -svg line (interpolate \&quot;basis-closed\&quot;))\n\n        three-polate (fn [[[x0 y0] [x1 y1]]]\n                       [[x0 y0]\n                        [(/ (+ (* 2 x0) x1) 3), (/ (+ (* 2 y0) y1) 3)]\n                        [(/ (+ (* 2 x1) x0) 3), (/ (+ (* 2 y1) y0) 3)]])\n\n        resample (fn [pts]\n                   (let [pairs (map vector (cons (last pts) pts) pts)]\n                     (mapcat three-polate pairs)))]\n\n    (u/timer (fn [_]\n               (let [ps @points\n                     vnoi (vor-obj (clj-&gt;js (mapv (juxt :x :y) ps)))]\n                 (-&gt; pts\n                     (.attr \&quot;d\&quot; (fn [pt i] (line (clj-&gt;js (resample (nth vnoi i)))))))\n                 (-&gt; pts2\n                     (.attr \&quot;d\&quot; (fn [pt i] (line (clj-&gt;js (resample (nth vnoi i))))))\n                     (.attr \&quot;transform\&quot; \&quot;scale(0.5 0.5)\&quot;))\n                 false)))))&quot; &quot;(moving-voronoi\n    {:selector \&quot;#app\&quot;\n     :width    500\n     :height   500\n     :speed    (p/&gt;f&gt; -1 1)\n     :n        100})&quot;], :remote []}}</component>
</project>