<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1454608315033">{:repl-history {:ide [], :local [&quot;(let [words (mapv (fn [i] {:text      (str \&quot;word\&quot; i)\n                               :frequency (rand-int 10)})\n                      (range n))\n          wc (wc2 \&quot;#app\&quot;)]\n      (wc (js&gt; words)))&quot; &quot;(do\n    (let [words (mapv (fn [i] {:text      (str \&quot;word\&quot; i)\n                               :frequency (rand-int 10)})\n                      (range 50))\n          wc (wc2 \&quot;#app\&quot;)]\n      (wc (js&gt; words)))\n    )&quot; &quot;(comment\n  (clear-svg!)\n  (word-cloud (gen-words 50)))&quot; &quot;(let [words (mapv (fn [i] {:text      (str \&quot;word\&quot; i)\n                               :frequency (rand-int 10)})\n                      (range 50))\n          wc (wc2 \&quot;#app\&quot;)]\n      (wc (js&gt; words)))&quot; &quot;(do\n    (clear-svg!)\n    (let [words (mapv (fn [i] {:text      (str \&quot;word\&quot; i)\n                               :frequency (rand-int 10)})\n                      (range 50))\n          wc (wc2 \&quot;#app\&quot;)]\n      (wc (js&gt; words)))\n    )&quot; &quot;(mapv (fn [i] {:text      (str \&quot;word\&quot; i)\n                               :frequency (+ 10 (rand-int 50))})\n                      (range 50))&quot; &quot;(do\n    (clear-svg!)\n    (let [words (mapv (fn [i] {:text      (str \&quot;word\&quot; i)\n                               :frequency (+ 10 (rand-int 50))})\n                      (range 50))\n          wc (wc2 \&quot;#app\&quot;)]\n      (wc (js&gt; words)))\n    )&quot; &quot;(do\n    (clear-svg!)\n    (let [wgen #(mapv (fn [i] {:text      (str \&quot;word\&quot; i)\n                               :frequency (+ 10 (rand-int 50))})\n                      (range 50))\n\n          words1 (wgen)\n          words2 (wgen)\n          wc (wc2 \&quot;#app\&quot;)]\n      (wc (js&gt; words1))\n      (js/setTimeout #(wc (js&gt; words2)) 2000))\n    )&quot; &quot;(do\n    (clear-svg!)\n    (let [wgen #(js&gt; (mapv (fn [i] {:text      (str \&quot;word\&quot; i)\n                                    :frequency (+ 10 (rand-int 50))})\n                           (range 50)))\n          wc (wc2 \&quot;#app\&quot;)]\n      (js/setInterval #(wc (wgen)) 2000))\n    )&quot; &quot;(do\n    (clear-svg!)\n    (let [wgen #(js&gt; (mapv (fn [i] {:text      (str \&quot;word\&quot; i)\n                                    :frequency (+ 10 (rand-int 50))})\n                           (range 50)))\n          wc (wc2 \&quot;#app\&quot;)]\n      (js/setInterval #(wc (wgen)) 5000))\n    )&quot; &quot;(defn wc2 [selector]\n  (let [fill (.category20 u/scale)\n        rs (lscale [0 1] [-10 10])\n        svg (*&gt; [:select selector]\n                [:append \&quot;svg\&quot;]\n                (u/attrs {:width 1000 :height 1000})\n                [:append \&quot;g\&quot;]\n                [:attr [\&quot;transform\&quot; \&quot;translate(500,500)\&quot;]])\n        draw (fn [words]\n               (let [cl (&gt;&gt; svg\n                            [:selectAll \&quot;text\&quot;]\n                            [:data [words]])]\n                 (&gt;&gt; cl\n                     [:enter]\n                     [:append \&quot;text\&quot;]\n                     (u/styles {:font-family \&quot;Impact\&quot;\n                                :fill        #(fill %2)})\n                     (u/attrs {:text-anchor \&quot;middle\&quot;\n                               :font-size   1})\n                     [:text #(.-text %)])\n\n                 (&gt;&gt; cl\n                     [:transition]\n                     [:duration 600]\n                     (u/styles {:font-size    #(str (.-frequency %) \&quot;px\&quot;)\n                                :fill-opacity 1})\n                     [:attr [\&quot;transform\&quot; #(str \&quot;translate(\&quot; (.-x %) \&quot;,\&quot; (.-y %)\n                                               \&quot;)rotate(\&quot; (.-rotate %) \&quot;)\&quot;)]])\n                 (&gt;&gt; cl\n                     [:exit]\n                     [:transition]\n                     [:duration 200]\n                     [:style [\&quot;fill-opacity\&quot; 0.000001]]\n                     [:attr [\&quot;font-size\&quot; 1]]\n                     [:remove])))]\n    (fn [ws]\n      (.. (.. js/d3 -layout cloud)\n          (size (js&gt; [1000 1000]))\n          (words (js&gt; ws))\n          (padding 5)\n          (rotate #(rs (rand)))\n          (font \&quot;Impact\&quot;)\n          (fontSize (fn [d] (.-frequency d)))\n          (on \&quot;end\&quot; #(do (println %) (draw %)))\n          start))))&quot; &quot;(do\n    (clear-svg!)\n    (let [wgen #(js&gt; (mapv (fn [i] {:text      (str \&quot;word\&quot; i)\n                                    :frequency (+ 10 (rand-int 50))})\n                           (range 30)))\n          wc (wc2 \&quot;#app\&quot;)]\n      (js/setInterval #(wc (wgen)) 5000))\n    )&quot; &quot;(do\n    (clear-svg!)\n    (let [wgen #(js&gt; (mapv (fn [i] {:text      (str \&quot;word\&quot; i)\n                                    :frequency (+ 10 (rand-int [10 30 50]))})\n                           (range 30)))\n          wc (wc2 \&quot;#app\&quot;)]\n      (js/setInterval #(wc (wgen)) 5000))\n    )&quot; &quot;(do\n    (clear-svg!)\n    (let [wgen #(js&gt; (mapv (fn [i] {:text      (str \&quot;word\&quot; i)\n                                    :frequency (+ 10 (rand-nth [10 30 50]))})\n                           (range 30)))\n          wc (wc2 \&quot;#app\&quot;)]\n      (js/setInterval #(wc (wgen)) 5000))\n    )&quot; &quot;(defn wc2 [selector]\n  (let [fill (.category20 u/scale)\n        rs (lscale [0 1] [-10 10])\n        svg (*&gt; [:select selector]\n                [:append \&quot;svg\&quot;]\n                (u/attrs {:width 1000 :height 1000})\n                [:append \&quot;g\&quot;]\n                [:attr [\&quot;transform\&quot; \&quot;translate(500,500)\&quot;]])\n        draw (fn [words]\n               (let [cl (&gt;&gt; svg\n                            [:selectAll \&quot;g text\&quot;]\n                            [:data [words]])]\n                 (&gt;&gt; cl\n                     [:enter]\n                     [:append \&quot;text\&quot;]\n                     (u/styles {:font-family \&quot;Impact\&quot;\n                                :fill        #(fill %2)})\n                     (u/attrs {:text-anchor \&quot;middle\&quot;\n                               :font-size   1})\n                     [:text #(.-text %)])\n\n                 (&gt;&gt; cl\n                     [:transition]\n                     [:duration 600]\n                     (u/styles {:font-size    #(str (.-frequency %) \&quot;px\&quot;)\n                                :fill-opacity 1})\n                     [:attr [\&quot;transform\&quot; #(str \&quot;translate(\&quot; (.-x %) \&quot;,\&quot; (.-y %)\n                                               \&quot;)rotate(\&quot; (.-rotate %) \&quot;)\&quot;)]])\n                 (&gt;&gt; cl\n                     [:exit]\n                     [:transition]\n                     [:duration 200]\n                     [:style [\&quot;fill-opacity\&quot; 0.000001]]\n                     [:attr [\&quot;font-size\&quot; 1]]\n                     [:remove])))]\n    (fn [ws]\n      (.. (.. js/d3 -layout cloud)\n          (size (js&gt; [1000 1000]))\n          (words (js&gt; ws))\n          (padding 5)\n          (rotate #(rs (rand)))\n          (font \&quot;Impact\&quot;)\n          (fontSize (fn [d] (.-frequency d)))\n          (on \&quot;end\&quot; draw)\n          start))))&quot; &quot;(do\n    (clear-svg!)\n    (let [wgen #(js&gt; (mapv (fn [i] {:text      (str \&quot;word\&quot; i)\n                                    :frequency (+ 10 (rand-nth [10 30 50]))})\n                           (range 30)))\n          wc (wc2 \&quot;#app\&quot;)]\n      (js/setInterval #(wc (wgen)) 2000))\n    )&quot; &quot;(let [wgen #(js&gt; (mapv (fn [i] {:text      (str \&quot;word\&quot; i)\n                                    :frequency (+ 10 (rand-nth [10 30 50]))})\n                           (range 30)))\n          wc (wc2 \&quot;#app\&quot;)]\n      (js/setInterval #(wc (wgen)) 2000))&quot; &quot;(let [wgen #(js&gt; (mapv (fn [i] {:text      (str \&quot;word\&quot; (gensym))\n                                    :frequency (+ 10 (rand-nth [10 30 50]))})\n                           (range 30)))\n          wc (wc2 \&quot;#app\&quot;)]\n      (js/setInterval #(wc (wgen)) 2000))&quot; &quot;(let [wgen #(js&gt; (mapv (fn [i] {:text      (str (gensym \&quot;word\&quot;))\n                                    :frequency (+ 10 (rand-nth [10 30 50]))})\n                           (range 30)))\n          wc (wc2 \&quot;#app\&quot;)]\n      (js/setInterval #(wc (wgen)) 2000))&quot; &quot;(do\n    (clear-svg!)\n    (let [wgen #(mapv (fn [i] {:text      (str (gensym \&quot;word\&quot;))\n                              :frequency (+ 10 (rand-nth [10 30 50]))})\n                     (range 30))\n          wc (wc2 \&quot;#app\&quot;)]\n      (js/setInterval #(wc (wgen)) 2000))\n    )&quot; &quot;(let [wgen #(mapv (fn [i] {:text      (str (gensym \&quot;word\&quot;))\n                              :frequency (+ 10 (rand-nth [10 30 50]))})\n                     (range 30))\n          wc (wc2 \&quot;#app\&quot;)]\n      (js/setInterval #(wc (wgen)) 2000))&quot; &quot;(let [words [\&quot;You don't know about me without you have read a book called The Adventures of Tom Sawyer but that ain't no matter.\&quot;,\n                 \&quot;The boy with fair hair lowered himself down the last few feet of rock and began to pick his way toward the lagoon.\&quot;,\n                 \&quot;When Mr. Bilbo Baggins of Bag End announced that he would shortly be celebrating his eleventy-first birthday with a party of special magnificence, there was much talk and excitement in Hobbiton.\&quot;,\n                 \&quot;It was inevitable: the scent of bitter almonds always reminded him of the fate of unrequited love.\&quot;]\n          wgen #(mapv (fn [t] {:text      t\n                               :frequency (+ 10 (rand-nth [10 30 50]))})\n                      (rand-nth words))\n          wc (wc2 \&quot;#app\&quot;)]\n      (js/setInterval #(wc (wgen)) 2000))&quot; &quot;(let [words [\&quot;You don't know about me without you have read a book called The Adventures of Tom Sawyer but that ain't no matter.\&quot;,\n                 \&quot;The boy with fair hair lowered himself down the last few feet of rock and began to pick his way toward the lagoon.\&quot;,\n                 \&quot;When Mr. Bilbo Baggins of Bag End announced that he would shortly be celebrating his eleventy-first birthday with a party of special magnificence, there was much talk and excitement in Hobbiton.\&quot;,\n                 \&quot;It was inevitable: the scent of bitter almonds always reminded him of the fate of unrequited love.\&quot;]\n          wgen #(mapv (fn [t] {:text      t\n                               :frequency (+ 10 (rand-nth [10 30 50]))})\n                      (clojure.string/split (rand-nth words) #\&quot; \&quot;))\n          wc (wc2 \&quot;#app\&quot;)]\n      (js/setInterval #(wc (wgen)) 2000))&quot; &quot;(let [words [\&quot;You don't know about me without you have read a book called The Adventures of Tom Sawyer but that ain't no matter.\&quot;,\n                 \&quot;The boy with fair hair lowered himself down the last few feet of rock and began to pick his way toward the lagoon.\&quot;,\n                 \&quot;When Mr. Bilbo Baggins of Bag End announced that he would shortly be celebrating his eleventy-first birthday with a party of special magnificence, there was much talk and excitement in Hobbiton.\&quot;,\n                 \&quot;It was inevitable: the scent of bitter almonds always reminded him of the fate of unrequited love.\&quot;]\n          wgen #(mapv (fn [t] {:text      t\n                               :frequency (+ 10 (rand-nth [10 30 50]))})\n                      (clojure.string/split (rand-nth words) #\&quot; \&quot;))\n          wc (wc2 {:selector \&quot;#app\&quot;\n                   :width 1000\n                   :height 1000\n                   :rotate [-90 90]})]\n      (js/setInterval #(wc (wgen)) 2000))&quot; &quot;(let [words [\&quot;You don't know about me without you have read a book called The Adventures of Tom Sawyer but that ain't no matter.\&quot;,\n                 \&quot;The boy with fair hair lowered himself down the last few feet of rock and began to pick his way toward the lagoon.\&quot;,\n                 \&quot;When Mr. Bilbo Baggins of Bag End announced that he would shortly be celebrating his eleventy-first birthday with a party of special magnificence, there was much talk and excitement in Hobbiton.\&quot;,\n                 \&quot;It was inevitable: the scent of bitter almonds always reminded him of the fate of unrequited love.\&quot;]\n          wgen #(mapv (fn [t] {:text      t\n                               :frequency (+ 10 (rand-nth [10 30 50]))})\n                      (clojure.string/split (rand-nth words) #\&quot; \&quot;))\n          wc (wc2 {:selector \&quot;#app\&quot;\n                   :width 1000\n                   :height 1000\n                   :rotate (fn [] (rand-nth [0 90 -90]))})]\n      (js/setInterval #(wc (wgen)) 2000))&quot; &quot;(word-cloud (gen-words 50))&quot; &quot;(let [words [\&quot;You don't know about me without you have read a book called The Adventures of Tom Sawyer but that ain't no matter.\&quot;,\n                 \&quot;The boy with fair hair lowered himself down the last few feet of rock and began to pick his way toward the lagoon.\&quot;,\n                 \&quot;When Mr. Bilbo Baggins of Bag End announced that he would shortly be celebrating his eleventy-first birthday with a party of special magnificence, there was much talk and excitement in Hobbiton.\&quot;,\n                 \&quot;It was inevitable: the scent of bitter almonds always reminded him of the fate of unrequited love.\&quot;]\n          wgen #(mapv (fn [t] {:text      t\n                               :frequency (+ 10 (rand-nth [10 30 50]))})\n                      (clojure.string/split (rand-nth words) #\&quot; \&quot;))\n          wc (wc2 {:selector \&quot;#app\&quot;\n                   :width 500\n                   :height 500\n                   :rotate (fn [] (rand-nth [0 90 -90]))})]\n      (js/setInterval #(wc (wgen)) 2000))&quot; &quot;(new js/XMLHttpRequest)&quot; &quot;(.. (new js/XMLHttpRequest)\n    (onreadystatechange #(fn [x] (println \&quot;yop\&quot;)))\n    (open \&quot;GET\&quot; \&quot;/data/tweets.json\&quot; true)\n    (send))&quot; &quot;(.. (new js/XMLHttpRequest)\n    (aset \&quot;onreadystatechange\&quot; #(fn [x] (println \&quot;yop\&quot;)))\n    (open \&quot;GET\&quot; \&quot;/data/tweets.json\&quot; true)\n    (send))&quot; &quot;(.. (new js/XMLHttpRequest)\n    (set \&quot;onreadystatechange\&quot; #(fn [x] (println \&quot;yop\&quot;)))\n    (open \&quot;GET\&quot; \&quot;/data/tweets.json\&quot; true)\n    (send))&quot; &quot;(-&gt; (new js/XMLHttpRequest)\n    (aset \&quot;onreadystatechange\&quot; #(fn [x] (println \&quot;yop\&quot;)))\n    (.open \&quot;GET\&quot; \&quot;/data/tweets.json\&quot; true)\n    (.send))&quot; &quot;(aset (new js/XMLHttpRequest) \&quot;onreadystatechange\&quot; #(fn [x] (println \&quot;yop\&quot;)))&quot; &quot;(let [xhttp (new js/XMLHttpRequest)] \n  (aset xhttp \&quot;onreadystatechange\&quot; #(fn [x] (println \&quot;yop\&quot;)))\n    (.open xhttp \&quot;GET\&quot; \&quot;/data/tweets.json\&quot; true)\n    (.send xhttp))&quot; &quot;(let [xhttp (new js/XMLHttpRequest)]\n  (aset xhttp \&quot;onreadystatechange\&quot; #(fn [x] (println \&quot;yop\&quot;)))\n    (.open xhttp \&quot;GET\&quot; \&quot;/data/tweets.json\&quot; true)\n    (.send xhttp))&quot; &quot;(let [xhttp (new js/XMLHttpRequest)]\n    (aset xhttp \&quot;onreadystatechange\&quot; #(fn [x] (println \&quot;yop\&quot;)))\n    (.open xhttp \&quot;GET\&quot; \&quot;data/tweets.json\&quot; true)\n    (.send xhttp))&quot; &quot;(ns d3.one\n  (:require cljsjs.d3\n            cljsjs.d3-cloud\n            [d3.utils :as u :refer [p &gt;&gt; *&gt; js&gt;]]\n            [cljs-http.client :as http]\n            [cljs.core.async :as async])\n  (:import goog.net.XhrIo))&quot; &quot;(defn xhr-connection []\n  (goog.net.XhrIo.))&quot; &quot;(defn xhr []\n  (goog.net.XhrIo.))&quot; &quot;(.send (xhr) \&quot;data/tweets.json\&quot; (fn [] (println \&quot;yop\&quot;)))&quot; &quot;(xhr)&quot; &quot;(.send (xhr) \&quot;/data/tweets.json\&quot; (fn [] (println \&quot;yop\&quot;)))&quot; &quot;(.send (goog.net.XhrIo.) \&quot;/data/tweets.json\&quot; (fn [] (println \&quot;yop\&quot;)))&quot; &quot;(goog.net.XhrIo.)&quot; &quot;(new goog.net.XhrIo)&quot; &quot;(.send (new goog.net.XhrIo) \&quot;/data/tweets.json\&quot; (fn [] (println \&quot;yop\&quot;)))&quot; &quot;(.send (new goog.net.XhrIo) \&quot;http://www.w3schools.com/ajax/tryit.asp?filename=tryajax_first\&quot; (fn [] (println \&quot;yop\&quot;)))&quot; &quot;(.send (new goog.net.XhrIo) \&quot;http://www.w3schools.com/ajax/tryit.asp?filename=tryajax_first\&quot; (fn [r] (println \&quot;yop\&quot;)))&quot; &quot;(.send (goog.net.XhrIo.) \&quot;http://www.w3schools.com\&quot; (fn [r] (println \&quot;yop\&quot;)))&quot; &quot;(.send (fn [] (goog.net.XhrIo.)) \&quot;http://www.w3schools.com\&quot; (fn [r] (println \&quot;yop\&quot;)))&quot; &quot;(.send goog.net.XhrIo \&quot;http://www.w3schools.com\&quot; (fn [r] (println \&quot;yop\&quot;)))&quot; &quot;(.send goog.net.XhrIo \&quot;data/tweets.json\&quot; (fn [r] (println \&quot;yop\&quot;)))&quot; &quot;(.send goog.net.XhrIo \&quot;data/tweets.json\&quot; (fn [r] (println r)))&quot; &quot;(.send goog.net.XhrIo \&quot;data/tweets.json\&quot; (fn [r] (.-responseText r)))&quot; &quot;(.send goog.net.XhrIo \&quot;data/tweets.json\&quot; (fn [r] (println (.-responseText r))))&quot; &quot;(.send goog.net.XhrIo \&quot;data/tweets.json\&quot; (fn [r] (println (.getResponseJson (.-target r)))))&quot; &quot;(.send goog.net.XhrIo \&quot;data/tweets.json\&quot; (fn [r] (println (.-target r))))&quot; &quot;(.send goog.net.XhrIo \&quot;data/tweets.json\&quot; (fn [r] (println (js-&gt;clj (.-target r)))))&quot; &quot;(.send goog.net.XhrIo \&quot;data/test.json\&quot; (fn [r] (println (js-&gt;clj (.getResponseJson (.-target r))))))&quot; &quot;(.send goog.net.XhrIo \&quot;data/tweets.json\&quot; (fn [r] (println (js-&gt;clj (.getResponseJson (.-target r))))))&quot; &quot;(.send goog.net.XhrIo \&quot;data/tweets.json\&quot; \n       (fn [r] (reset! tweets  (js-&gt;clj (.getResponseJson (.-target r))))))&quot; &quot;(.. js/d3\n      nest\n      (key #(.-user %))\n      (entries @tweets))&quot; &quot;(.. js/d3\n      nest\n      (key #(.-user %))\n      (entries (:tweets @tweets)))&quot; &quot;(.send goog.net.XhrIo \&quot;data/tweets.json\&quot;\n       (fn [r] (reset! tweets  (js-&gt;clj (.getResponseJson (.-target r))))))&quot; &quot;(:tweets @tweets)&quot; &quot;(.. js/d3\n      nest\n      (key #(.-user %))\n      (entries (js&gt; (get @tweets \&quot;tweets\&quot;))))&quot; &quot;(u/scale.category10 ([0,1,2]))&quot; &quot;(u/scale.category10 #js [0 1 2])&quot; &quot;(let [nested-tweets\n        (.. js/d3\n            nest\n            (key #(.-user %))\n            (entries (js&gt; (get @tweets \&quot;tweets\&quot;))))\n        packable-tweets\n        (js&gt; {:id \&quot;All Tweets\&quot;\n              :values nested-tweets})\n        depthScale\n        (u/scale.category10 #js [0 1 2])\n        packChart\n        (u/layout.pack)]\n    (.. packChart\n        (size #js [500 500])\n        (children #(.-values %))\n        (value (constantly 1)))\n\n    (*&gt; [:select \&quot;svg\&quot;]\n        [:selectAll \&quot;circle\&quot;]\n        [:data (packChart packable-tweets)]\n        [:append \&quot;circle\&quot;]\n        (u/attrs {:r #(.-r %)\n                  :cx #(.-cx %)\n                  :cy #(.-cy %)})\n        (u/styles {:fill #(depthScale (.-depth %))\n                   :stroke \&quot;2px black\&quot;})))&quot; &quot;(do @tweets)&quot; &quot;(let [nested-tweets\n        (.. js/d3\n            nest\n            (key #(.-user %))\n            (entries (js&gt; (get @tweets \&quot;tweets\&quot;))))\n        packable-tweets\n        (js&gt; {:id \&quot;All Tweets\&quot;\n              :values nested-tweets})\n        depthScale\n        (u/scale.category10 #js [0 1 2])\n        packChart\n        (u/layout.pack)]\n    (.. packChart\n        (size #js [500 500])\n        (children #(.-values %))\n        (value (constantly 1)))\n\n    (&gt;&gt; (svg)\n        [:selectAll \&quot;circle\&quot;]\n        [:data (packChart packable-tweets)]\n        [:append \&quot;circle\&quot;]\n        (u/attrs {:r #(.-r %)\n                  :cx #(.-cx %)\n                  :cy #(.-cy %)})\n        (u/styles {:fill #(depthScale (.-depth %))\n                   :stroke \&quot;2px black\&quot;})))&quot; &quot;(let [nested-tweets\n        (.. js/d3\n            nest\n            (key #(.-user %))\n            (entries (js&gt; (get @tweets \&quot;tweets\&quot;))))\n        packable-tweets\n        (js&gt; {:id \&quot;All Tweets\&quot;\n              :values nested-tweets})\n        depthScale\n        (u/scale.category10 #js [0 1 2])\n        packChart\n        (u/layout.pack)]\n    \n    (.. packChart\n        (size #js [500 500])\n        (children #(.-values %))\n        (value (constantly 1)))\n    \n    (println (packChart packable-tweets))\n\n    (&gt;&gt; (svg)\n        [:selectAll \&quot;circle\&quot;]\n        [:data (packChart packable-tweets)]\n        [:append \&quot;circle\&quot;]\n        (u/attrs {:r #(.-r %)\n                  :cx #(.-cx %)\n                  :cy #(.-cy %)})\n        (u/styles {:fill #(depthScale (.-depth %))\n                   :stroke \&quot;2px black\&quot;})))&quot; &quot;(packChart packable-tweets)&quot; &quot;(let [nested-tweets\n        (.. js/d3\n            nest\n            (key #(.-user %))\n            (entries (js&gt; (get @tweets \&quot;tweets\&quot;))))\n        packable-tweets\n        (js&gt; {:id \&quot;All Tweets\&quot;\n              :values nested-tweets})\n        depthScale\n        (u/scale.category10 #js [0 1 2])\n        packChart\n        (u/layout.pack)]\n\n    (.. packChart\n        (size #js [500 500])\n        (children #(.-values %))\n        (value (constantly 1)))\n\n    (println (packChart packable-tweets))\n\n    (&gt;&gt; (svg)\n        [:selectAll \&quot;circle\&quot;]\n        [:data [(packChart packable-tweets) identity]]\n        [:append \&quot;circle\&quot;]\n        (u/attrs {:r #(.-r %)\n                  :cx #(.-cx %)\n                  :cy #(.-cy %)})\n        (u/styles {:fill #(depthScale (.-depth %))\n                   :stroke \&quot;2px black\&quot;})))&quot; &quot;(let [nested-tweets\n        (.. js/d3\n            nest\n            (key #(.-user %))\n            (entries (js&gt; (get @tweets \&quot;tweets\&quot;))))\n        packable-tweets\n        (js&gt; {:id \&quot;All Tweets\&quot;\n              :values nested-tweets})\n        depthScale\n        (u/scale.category10 #js [0 1 2])\n        packChart\n        (u/layout.pack)]\n\n    (.. packChart\n        (size #js [500 500])\n        (children #(.-values %))\n        (value (constantly 1)))\n\n\n    (&gt;&gt; (svg)\n        [:selectAll \&quot;circle\&quot;]\n        [:data [(packChart packable-tweets) identity]]\n        [:append \&quot;circle\&quot;]\n        (u/attrs {:r #(.-r %)\n                  :cx #(.-cx %)\n                  :cy #(.-cy %)})\n        (u/styles {:fill #(depthScale (.-depth %))\n                   :stroke \&quot;2px black\&quot;})))&quot; &quot;(let [nested-tweets\n        (.. js/d3\n            nest\n            (key #(.-user %))\n            (entries (js&gt; (get @tweets \&quot;tweets\&quot;))))\n        packable-tweets\n        (js&gt; {:id \&quot;All Tweets\&quot;\n              :values nested-tweets})\n        depthScale\n        (u/scale.category10 #js [0 1 2])\n        packChart\n        (u/layout.pack)]\n\n    (.. packChart\n        (size #js [500 500])\n        (children #(.-values %))\n        (value (constantly 1)))\n\n\n    (&gt;&gt; (svg)\n        [:selectAll \&quot;circle\&quot;]\n        [:data [(packChart packable-tweets) identity]]\n        [:append \&quot;circle\&quot;]\n        (u/attrs {:r #(.-r %)\n                  :cx #(.-cx %)\n                  :cy #(.-cy %)})\n        (u/styles {:fill #(depthScale (.-depth %))\n                   :stroke \&quot;black\&quot;})))&quot; &quot;(let [nested-tweets\n        (.. js/d3\n            nest\n            (key #(.-user %))\n            (entries (js&gt; (get @tweets \&quot;tweets\&quot;))))\n        packable-tweets\n        (js&gt; {:id \&quot;All Tweets\&quot;\n              :values nested-tweets})\n        depthScale\n        (u/scale.category10 #js [0 1 2])\n        packChart\n        (u/layout.pack)]\n    \n    (println packable-tweets)\n\n    (.. packChart\n        (size #js [500 500])\n        (children #(.-values %))\n        (value (constantly 1)))\n\n\n    (&gt;&gt; (svg)\n        [:selectAll \&quot;circle\&quot;]\n        [:data [(packChart packable-tweets) identity]]\n        [:append \&quot;circle\&quot;]\n        (u/attrs {:r #(.-r %)\n                  :cx #(.-cx %)\n                  :cy #(.-cy %)})\n        (u/styles {:fill #(depthScale (.-depth %))\n                   :stroke \&quot;black\&quot;})))&quot; &quot;(let [nested-tweets\n        (.. js/d3\n            nest\n            (key #(.-user %))\n            (entries (js&gt; (get @tweets \&quot;tweets\&quot;))))\n        packable-tweets\n        (js&gt; {:id \&quot;All Tweets\&quot;\n              :values nested-tweets})\n        depthScale\n        (u/scale.category10 #js [0 1 2])\n        packChart\n        (u/layout.pack)]\n\n    (.. packChart\n        (size #js [500 500])\n        (children #(.-values %))\n        (value (constantly 1)))\n\n    (&gt;&gt; (svg)\n        [:selectAll \&quot;circle\&quot;]\n        [:data [(packChart packable-tweets) identity]]\n        [:enter]\n        [:append \&quot;circle\&quot;]\n        (u/attrs {:r #(.-r %)\n                  :cx #(.-cx %)\n                  :cy #(.-cy %)})\n        (u/styles {:fill #(depthScale (.-depth %))\n                   :stroke \&quot;black\&quot;})))&quot; &quot;(let [nested-tweets\n        (.. js/d3\n            nest\n            (key #(.-user %))\n            (entries (js&gt; (get @tweets \&quot;tweets\&quot;))))\n        packable-tweets\n        (js&gt; {:id \&quot;All Tweets\&quot;\n              :values nested-tweets})\n        depthScale\n        (u/scale.category10 #js [0 1 2])\n        packChart\n        (u/layout.pack)\n\n        svg (*&gt; [:select selector]\n                [:append \&quot;svg\&quot;]\n                (u/attrs {:width width :height height})\n                [:append \&quot;g\&quot;]\n                (u/translate (/ width 2) (/ height 2)))]\n\n    (.. packChart\n        (size #js [500 500])\n        (children #(.-values %))\n        (value (constantly 1)))\n\n    (&gt;&gt; svg\n        [:selectAll \&quot;circle\&quot;]\n        [:data [(packChart packable-tweets) identity]]\n        [:enter]\n        [:append \&quot;circle\&quot;]\n        (u/attrs {:r #(.-r %)\n                  :cx #(.-cx %)\n                  :cy #(.-cy %)})\n        (u/styles {:fill #(depthScale (.-depth %))\n                   :stroke \&quot;black\&quot;})))&quot; &quot;(let [nested-tweets\n        (.. js/d3\n            nest\n            (key #(.-user %))\n            (entries (js&gt; (get @tweets \&quot;tweets\&quot;))))\n        packable-tweets\n        (js&gt; {:id \&quot;All Tweets\&quot;\n              :values nested-tweets})\n        depthScale\n        (u/scale.category10 #js [0 1 2])\n        packChart\n        (u/layout.pack)\n\n        svg (*&gt; [:select \&quot;#app\&quot;]\n                [:append \&quot;svg\&quot;]\n                (u/attrs {:width 800 :height 800})\n                [:append \&quot;g\&quot;]\n                (u/translate 400 400))]\n\n    (.. packChart\n        (size #js [500 500])\n        (children #(.-values %))\n        (value (constantly 1)))\n\n    (&gt;&gt; svg\n        [:selectAll \&quot;circle\&quot;]\n        [:data [(packChart packable-tweets) identity]]\n        [:enter]\n        [:append \&quot;circle\&quot;]\n        (u/attrs {:r #(.-r %)\n                  :cx #(.-cx %)\n                  :cy #(.-cy %)})\n        (u/styles {:fill #(depthScale (.-depth %))\n                   :stroke \&quot;black\&quot;})))&quot; &quot;(let [nested-tweets\n        (.. js/d3\n            nest\n            (key #(.-user %))\n            (entries (js&gt; (get @tweets \&quot;tweets\&quot;))))\n        packable-tweets\n        (js&gt; {:id \&quot;All Tweets\&quot;\n              :values nested-tweets})\n        depthScale\n        (u/scale.category10 #js [0 1 2])\n        packChart\n        (u/layout.pack)\n\n        svg (*&gt; [:select \&quot;#app\&quot;]\n                [:append \&quot;svg\&quot;]\n                (u/attrs {:width 800 :height 800})\n                [:append \&quot;g\&quot;]\n                (u/translate 0 0))]\n\n    (.. packChart\n        (size #js [500 500])\n        (children #(.-values %))\n        (value (constantly 1)))\n\n    (&gt;&gt; svg\n        [:selectAll \&quot;circle\&quot;]\n        [:data [(packChart packable-tweets) identity]]\n        [:enter]\n        [:append \&quot;circle\&quot;]\n        (u/attrs {:r #(.-r %)\n                  :cx #(.-cx %)\n                  :cy #(.-cy %)})\n        (u/styles {:fill #(depthScale (.-depth %))\n                   :stroke \&quot;black\&quot;})))&quot; &quot;(let [nested-tweets\n        (.. js/d3\n            nest\n            (key #(.-user %))\n            (entries (.-tweets @tweets)))\n        packable-tweets\n        (js&gt; {:id \&quot;All Tweets\&quot;\n              :values nested-tweets})\n        depthScale\n        (u/scale.category10 #js [0 1 2])\n        packChart\n        (u/layout.pack)\n\n        svg (*&gt; [:select \&quot;#app\&quot;]\n                [:append \&quot;svg\&quot;]\n                (u/attrs {:width 800 :height 800})\n                [:append \&quot;g\&quot;]\n                (u/translate 0 0))]\n\n    (.. packChart\n        (size #js [500 500])\n        (children #(.-values %))\n        (value (constantly 1)))\n\n    (&gt;&gt; svg\n        [:selectAll \&quot;circle\&quot;]\n        [:data [(packChart packable-tweets) identity]]\n        [:enter]\n        [:append \&quot;circle\&quot;]\n        (u/attrs {:r #(.-r %)\n                  :cx #(.-cx %)\n                  :cy #(.-cy %)})\n        (u/styles {:fill #(depthScale (.-depth %))\n                   :stroke \&quot;black\&quot;})))&quot; &quot;(let [nested-tweets\n        (.. js/d3\n            nest\n            (key #(.-user %))\n            (entries (.-tweets @tweets)))\n        packable-tweets\n        (js&gt; {:id \&quot;All Tweets\&quot;\n              :values nested-tweets})\n        depthScale\n        (u/scale.category10 #js [0 1 2])\n        packChart\n        (u/layout.pack)\n\n        svg (*&gt; [:select \&quot;#app\&quot;]\n                [:append \&quot;svg\&quot;]\n                (u/attrs {:width 800 :height 800})\n                [:append \&quot;g\&quot;]\n                (u/translate 0 0))]\n\n    (.. packChart\n        (size #js [500 500])\n        (children #(.-values %))\n        (value (constantly 10)))\n\n    (&gt;&gt; svg\n        [:selectAll \&quot;circle\&quot;]\n        [:data [(packChart packable-tweets) identity]]\n        [:enter]\n        [:append \&quot;circle\&quot;]\n        (u/attrs {:r #(.-r %)\n                  :cx #(.-cx %)\n                  :cy #(.-cy %)})\n        (u/styles {:fill #(depthScale (.-depth %))\n                   :stroke \&quot;black\&quot;})))&quot; &quot;(let [nested-tweets\n        (.. js/d3\n            nest\n            (key #(.-user %))\n            (entries (.-tweets @tweets)))\n        packable-tweets\n        (js&gt; {:id \&quot;All Tweets\&quot;\n              :values nested-tweets})\n        depthScale\n        (u/scale.category10 #js [0 1 2])\n        packChart\n        (u/layout.pack)\n\n        svg (*&gt; [:select \&quot;#app\&quot;]\n                [:append \&quot;svg\&quot;]\n                (u/attrs {:width 800 :height 800})\n                [:append \&quot;g\&quot;]\n                (u/translate 400 400))]\n\n    (.. packChart\n        (size #js [500 500])\n        (children #(.-values %))\n        (value (constantly 10)))\n\n    (&gt;&gt; svg\n        [:selectAll \&quot;circle\&quot;]\n        [:data [(packChart packable-tweets) identity]]\n        [:enter]\n        [:append \&quot;circle\&quot;]\n        (u/attrs {:r #(.-r %)\n                  :cx #(.-cx %)\n                  :cy #(.-cy %)})\n        (u/styles {:fill #(depthScale (.-depth %))\n                   :stroke \&quot;black\&quot;})))&quot; &quot;(let [nested-tweets\n        (.. js/d3\n            nest\n            (key #(.-user %))\n            (entries (.-tweets @tweets)))\n        packable-tweets\n        (js&gt; {:id \&quot;All Tweets\&quot;\n              :values nested-tweets})\n        depthScale\n        (u/scale.category10 #js [0 1 2])\n        packChart\n        (u/layout.pack)\n\n        svg (*&gt; [:select \&quot;#app\&quot;]\n                [:append \&quot;svg\&quot;]\n                (u/attrs {:width 800 :height 800})\n                [:append \&quot;g\&quot;]\n                (u/translate 400 400))]\n\n    (.. packChart\n        (size #js [500 500])\n        (children #(.-values %))\n        (value (constantly 10)))\n\n    (&gt;&gt; svg\n        [:selectAll \&quot;circle\&quot;]\n        [:data [(packChart packable-tweets)]]\n        [:enter]\n        [:append \&quot;circle\&quot;]\n        (u/attrs {:r #(.-r %)\n                  :cx #(.-cx %)\n                  :cy #(.-cy %)})\n        (u/styles {:fill #(depthScale (.-depth %))\n                   :stroke \&quot;2px\&quot;})))&quot; &quot;(let [nested-tweets\n        (.. js/d3\n            nest\n            (key #(.-user %))\n            (entries (.-tweets @tweets)))\n        packable-tweets\n        (js&gt; {:id \&quot;All Tweets\&quot;\n              :values nested-tweets})\n        depthScale\n        (u/scale.category10 #js [0 1 2])\n        packChart\n        (u/layout.pack)\n\n        svg (*&gt; [:select \&quot;#app\&quot;]\n                [:append \&quot;svg\&quot;]\n                (u/attrs {:width 800 :height 800})\n                [:append \&quot;g\&quot;]\n                (u/translate 400 400))]\n\n    (.. packChart\n        (size #js [500 500])\n        (children #(.-values %))\n        (value #(+ (count (.-retweets %)) (count (.-favorites %)) 1)))\n\n    (&gt;&gt; svg\n        [:selectAll \&quot;circle\&quot;]\n        [:data [(packChart packable-tweets)]]\n        [:enter]\n        [:append \&quot;circle\&quot;]\n        (u/attrs {:r #(.-r %)\n                  :cx #(.-x %)\n                  :cy #(.-y %)})\n        (u/styles {:fill #(depthScale (.-depth %))\n                   :stroke \&quot;2px\&quot;})))&quot; &quot;(let [nested-tweets\n        (.. js/d3\n            nest\n            (key #(.-user %))\n            (entries (.-tweets @tweets)))\n        packable-tweets\n        (js&gt; {:id \&quot;All Tweets\&quot;\n              :values nested-tweets})\n        depthScale\n        (u/scale.category10 #js [0 1 2])\n        packChart\n        (u/layout.pack)\n\n        svg (*&gt; [:select \&quot;#app\&quot;]\n                [:append \&quot;svg\&quot;]\n                (u/attrs {:width 800 :height 800})\n                [:append \&quot;g\&quot;])]\n\n    (.. packChart\n        (size #js [500 500])\n        (children #(.-values %))\n        (value #(+ (count (.-retweets %)) (count (.-favorites %)) 1)))\n\n    (&gt;&gt; svg\n        [:selectAll \&quot;circle\&quot;]\n        [:data [(packChart packable-tweets)]]\n        [:enter]\n        [:append \&quot;circle\&quot;]\n        (u/attrs {:r #(.-r %)\n                  :cx #(.-x %)\n                  :cy #(.-y %)})\n        (u/styles {:fill #(depthScale (.-depth %))\n                   :stroke \&quot;2px\&quot;})))&quot; &quot;(defn pack1 [data] \n  (let [nested-tweets\n        (.. js/d3\n            nest\n            (key #(.-user %))\n            (entries data))\n        packable-tweets\n        (js&gt; {:id \&quot;All Tweets\&quot;\n              :values nested-tweets})\n        \n        depthScale\n        (u/scale.category10 #js [0 1 2])\n        \n        packChart\n        (u/layout.pack)\n\n        svg (*&gt; [:select \&quot;#app\&quot;]\n                [:append \&quot;svg\&quot;]\n                (u/attrs {:width 800 :height 800})\n                [:append \&quot;g\&quot;])]\n\n    (.. packChart\n        (size #js [500 500])\n        (children #(.-values %))\n        (value #(+ (count (.-retweets %)) (count (.-favorites %)) 1)))\n\n    (&gt;&gt; svg\n        [:selectAll \&quot;circle\&quot;]\n        [:data [(packChart packable-tweets)]]\n        [:enter]\n        [:append \&quot;circle\&quot;]\n        (u/attrs {:r #(.-r %)\n                  :cx #(.-x %)\n                  :cy #(.-y %)})\n        (u/styles {:fill #(depthScale (.-depth %))\n                   :stroke \&quot;2px\&quot;}))))&quot; &quot;(def tweets (atom nil))&quot; &quot;(.send goog.net.XhrIo \&quot;data/tweets.json\&quot;\n       (fn [r] (reset! tweets (.getResponseJson (.-target r)))))&quot; &quot;(get @tweets \&quot;tweets\&quot;)&quot; &quot;(aget @tweets \&quot;tweets\&quot;)&quot; &quot;(pack1 (aget @tweets \&quot;tweets\&quot;))&quot; &quot;(clear-svg!)&quot; &quot;(let [words [\&quot;You don't know about me without you have read a book called The Adventures of Tom Sawyer but that ain't no matter.\&quot;,\n                 \&quot;The boy with fair hair lowered himself down the last few feet of rock and began to pick his way toward the lagoon.\&quot;,\n                 \&quot;When Mr. Bilbo Baggins of Bag End announced that he would shortly be celebrating his eleventy-first birthday with a party of special magnificence, there was much talk and excitement in Hobbiton.\&quot;,\n                 \&quot;It was inevitable: the scent of bitter almonds always reminded him of the fate of unrequited love.\&quot;]\n          wgen #(mapv (fn [t] {:text      t\n                               :frequency (+ 10 (rand-nth [10 30 50]))})\n                      (clojure.string/split (rand-nth words) #\&quot; \&quot;))\n          wc (wc2 {:selector \&quot;#app\&quot;\n                   :width    500\n                   :height   500\n                   :rotate   (fn [] (rand-nth [0 90 -90]))})]\n      (js/setInterval #(wc (wgen)) 2000))&quot; &quot;(ns d3.utils)&quot; &quot;(defmacro style&gt; [hm]\n  `(fn [x#]\n     (.. x#\n         ~@(for [[k v] hm]\n             ('style (name k) v)))))&quot; &quot;(defmacro style&gt; [hm]\n  `(fn [x#]\n     (.. x#\n         ~@(for [[k v] hm]\n             `('style (name k) v)))))&quot; &quot;(defmacro style&gt; [hm]\n  `(fn [x#]\n     (.. x#\n         ~@(for [[k v] hm]\n             `(~'style (name k) v)))))&quot; &quot;(defmacro style&gt; [hm]\n  `(fn [x#]\n     (.. x#\n         ~@(for [[k v] hm]\n             `(~'style ~(name k) ~v)))))&quot; &quot;(macroexpand '(style&gt; {:fill \&quot;violet\&quot; :stroke \&quot;darkviolet\&quot; :stroke-width \&quot;2px\&quot;}))&quot;], :remote []}}</component>
</project>