;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name generics.core, :imports nil, :requires nil, :uses nil, :defs {generics {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/d3-in-action/src/generics/core.cljs", :line 3, :column 7, :end-line 3, :end-column 15, :arglists (quote ([x]))}, :name generics.core/generics, :variadic false, :file "src/generics/core.cljs", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3, :end-line 3, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, foo-multi {:name generics.core/foo-multi, :file "src/generics/core.cljs", :line 6, :column 1, :end-line 6, :end-column 20, :meta {:file "/Users/pierre/Code/Clojure/d3-in-action/src/generics/core.cljs", :line 6, :column 11, :end-line 6, :end-column 20}}, foo {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/d3-in-action/src/generics/core.cljs", :line 10, :column 7, :end-line 10, :end-column 10, :arglists (quote ([x & args])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(x args)], :arglists ([x & args]), :arglists-meta (nil)}}, :name generics.core/foo, :variadic true, :file "src/generics/core.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(x args)], :arglists ([x & args]), :arglists-meta (nil)}, :method-params [(x args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists ([x & args])}, add-method {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/d3-in-action/src/generics/core.cljs", :line 15, :column 7, :end-line 15, :end-column 17, :arglists (quote ([x name impl]))}, :name generics.core/add-method, :variadic false, :file "src/generics/core.cljs", :end-column 17, :method-params ([x name impl]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x name impl]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:default :type :foo :generics :hierarchy}, :order [:generics :hierarchy :type :default :foo]}, :doc nil}