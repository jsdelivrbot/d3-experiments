;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{add-method get-method}, :name generics.core, :imports nil, :requires nil, :uses nil, :defs {generics {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/d3-in-action/src/generics/core.cljc", :line 4, :column 8, :end-line 4, :end-column 16, :private true, :arglists (quote ([x]))}, :private true, :name generics.core/generics, :variadic false, :file "src/generics/core.cljc", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, add-methods {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/d3-in-action/src/generics/core.cljc", :line 7, :column 8, :end-line 7, :end-column 19, :private true, :arglists (quote ([x impl-map]))}, :private true, :name generics.core/add-methods, :variadic false, :file "src/generics/core.cljc", :end-column 19, :method-params ([x impl-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x impl-map]))}, add-method {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/d3-in-action/src/generics/core.cljc", :line 15, :column 8, :end-line 15, :end-column 18, :private true, :arglists (quote ([x name impl]))}, :private true, :name generics.core/add-method, :variadic false, :file "src/generics/core.cljc", :end-column 18, :method-params ([x name impl]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x name impl]))}, get-method {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/d3-in-action/src/generics/core.cljc", :line 30, :column 7, :end-line 30, :end-column 17, :arglists (quote ([x name]))}, :name generics.core/get-method, :variadic false, :file "src/generics/core.cljc", :end-column 17, :method-params ([x name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x name]))}, default-dispatch-fn {:protocol-inline nil, :meta {:file "/Users/pierre/Code/Clojure/d3-in-action/src/generics/core.cljc", :line 34, :column 7, :end-line 34, :end-column 26, :arglists (quote ([x]))}, :name generics.core/default-dispatch-fn, :variadic false, :file "src/generics/core.cljc", :end-column 26, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:type :generics}, :order [:generics :type]}, :doc nil}